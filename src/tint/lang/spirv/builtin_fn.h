// Copyright 2023 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by 'tools/src/cmd/gen' using the template:
//   src/tint/lang/spirv/builtin_fn.h.tmpl
//
// To regenerate run: './tools/run gen'
//
//                       Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#ifndef SRC_TINT_LANG_SPIRV_BUILTIN_FN_H_
#define SRC_TINT_LANG_SPIRV_BUILTIN_FN_H_

#include <cstdint>
#include <string>

#include "src/tint/utils/traits/traits.h"

// \cond DO_NOT_DOCUMENT
namespace tint::spirv {

/// Enumerator of all builtin functions
enum class BuiltinFn : uint8_t {
    kArrayLength,
    kAtomicAnd,
    kAtomicCompareExchange,
    kAtomicExchange,
    kAtomicIadd,
    kAtomicIsub,
    kAtomicLoad,
    kAtomicOr,
    kAtomicSmax,
    kAtomicSmin,
    kAtomicStore,
    kAtomicUmax,
    kAtomicUmin,
    kAtomicXor,
    kDot,
    kImageDrefGather,
    kImageFetch,
    kImageGather,
    kImageQuerySize,
    kImageQuerySizeLod,
    kImageRead,
    kImageSampleImplicitLod,
    kImageSampleExplicitLod,
    kImageSampleDrefImplicitLod,
    kImageSampleDrefExplicitLod,
    kImageWrite,
    kMatrixTimesMatrix,
    kMatrixTimesScalar,
    kMatrixTimesVector,
    kSampledImage,
    kSelect,
    kVectorTimesMatrix,
    kVectorTimesScalar,
    kSdot,
    kUdot,
    kNone,
};

/// @returns the name of the builtin function type. The spelling, including
/// case, matches the name in the WGSL spec.
const char* str(BuiltinFn i);

/// Emits the name of the builtin function type. The spelling, including case,
/// matches the name in the WGSL spec.
template <typename STREAM, typename = traits::EnableIfIsOStream<STREAM>>
auto& operator<<(STREAM& o, BuiltinFn i) {
    return o << str(i);
}

}  // namespace tint::spirv
// \endcond

#endif  // SRC_TINT_LANG_SPIRV_BUILTIN_FN_H_
