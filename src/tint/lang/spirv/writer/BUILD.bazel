# Copyright 2023 The Tint Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################################
# File generated by 'tools/src/cmd/gen' using the template:
#   tools/src/cmd/gen/build/BUILD.bazel.tmpl
#
# To regenerate run: './tools/run gen'
#
#                       Do not modify this file directly
################################################################################

load("//src/tint:flags.bzl", "COPTS")
load("@bazel_skylib//lib:selects.bzl", "selects")
cc_library(
  name = "writer",
  srcs = [
    "writer.cc",
  ],
  hdrs = [
    "output.h",
    "writer.h",
  ],
  deps = [
    "//src/tint/api/common",
    "//src/tint/api/options",
    "//src/tint/lang/core",
    "//src/tint/lang/core/constant",
    "//src/tint/lang/core/intrinsic",
    "//src/tint/lang/core/ir",
    "//src/tint/lang/core/type",
    "//src/tint/lang/spirv",
    "//src/tint/lang/spirv/intrinsic",
    "//src/tint/lang/spirv/ir",
    "//src/tint/lang/wgsl",
    "//src/tint/lang/wgsl/ast",
    "//src/tint/lang/wgsl/program",
    "//src/tint/lang/wgsl/reader/lower",
    "//src/tint/lang/wgsl/reader/program_to_ir",
    "//src/tint/lang/wgsl/sem",
    "//src/tint/utils/containers",
    "//src/tint/utils/diagnostic",
    "//src/tint/utils/ice",
    "//src/tint/utils/id",
    "//src/tint/utils/macros",
    "//src/tint/utils/math",
    "//src/tint/utils/memory",
    "//src/tint/utils/reflection",
    "//src/tint/utils/result",
    "//src/tint/utils/rtti",
    "//src/tint/utils/symbol",
    "//src/tint/utils/text",
    "//src/tint/utils/traits",
  ] + select({
    ":tint_build_spv_reader_or_tint_build_spv_writer": [
      "@spirv_headers//:spirv_cpp11_headers", "@spirv_headers//:spirv_c_headers",
    ],
    "//conditions:default": [],
  }) + select({
    ":tint_build_spv_writer": [
      "//src/tint/lang/spirv/writer/ast_printer",
      "//src/tint/lang/spirv/writer/common",
      "//src/tint/lang/spirv/writer/printer",
      "//src/tint/lang/spirv/writer/raise",
    ],
    "//conditions:default": [],
  }),
  copts = COPTS,
  visibility = ["//visibility:public"],
)
cc_library(
  name = "test",
  alwayslink = True,
  srcs = [
    "access_test.cc",
    "atomic_builtin_test.cc",
    "binary_test.cc",
    "bitcast_test.cc",
    "builtin_test.cc",
    "constant_test.cc",
    "construct_test.cc",
    "convert_test.cc",
    "discard_test.cc",
    "function_test.cc",
    "if_test.cc",
    "let_test.cc",
    "loop_test.cc",
    "switch_test.cc",
    "swizzle_test.cc",
    "texture_builtin_test.cc",
    "type_test.cc",
    "unary_test.cc",
    "var_test.cc",
    "writer_test.cc",
  ],
  deps = [
    "//src/tint/api/common",
    "//src/tint/lang/core",
    "//src/tint/lang/core/constant",
    "//src/tint/lang/core/intrinsic",
    "//src/tint/lang/core/ir",
    "//src/tint/lang/core/type",
    "//src/tint/lang/spirv",
    "//src/tint/lang/spirv/intrinsic",
    "//src/tint/lang/spirv/ir",
    "//src/tint/utils/containers",
    "//src/tint/utils/diagnostic",
    "//src/tint/utils/ice",
    "//src/tint/utils/id",
    "//src/tint/utils/macros",
    "//src/tint/utils/math",
    "//src/tint/utils/memory",
    "//src/tint/utils/reflection",
    "//src/tint/utils/result",
    "//src/tint/utils/rtti",
    "//src/tint/utils/symbol",
    "//src/tint/utils/text",
    "//src/tint/utils/traits",
    "@gtest",
  ] + select({
    ":tint_build_spv_reader_or_tint_build_spv_writer": [
      "@spirv_headers//:spirv_cpp11_headers", "@spirv_headers//:spirv_c_headers",
      "@spirv_tools",
    ],
    "//conditions:default": [],
  }) + select({
    ":tint_build_spv_writer": [
      "//src/tint/lang/spirv/writer/common",
      "//src/tint/lang/spirv/writer/common:test",
      "//src/tint/lang/spirv/writer/printer",
      "//src/tint/lang/spirv/writer/raise",
    ],
    "//conditions:default": [],
  }),
  copts = COPTS,
  visibility = ["//visibility:public"],
)
cc_library(
  name = "bench",
  alwayslink = True,
  srcs = [
    "writer_bench.cc",
  ],
  deps = [
    "//src/tint/api/common",
    "//src/tint/cmd/bench:bench",
    "//src/tint/lang/core",
    "//src/tint/lang/core/constant",
    "//src/tint/lang/core/type",
    "//src/tint/lang/wgsl",
    "//src/tint/lang/wgsl/ast",
    "//src/tint/lang/wgsl/program",
    "//src/tint/lang/wgsl/sem",
    "//src/tint/utils/containers",
    "//src/tint/utils/diagnostic",
    "//src/tint/utils/ice",
    "//src/tint/utils/id",
    "//src/tint/utils/macros",
    "//src/tint/utils/math",
    "//src/tint/utils/memory",
    "//src/tint/utils/reflection",
    "//src/tint/utils/result",
    "//src/tint/utils/rtti",
    "//src/tint/utils/symbol",
    "//src/tint/utils/text",
    "//src/tint/utils/traits",
    "@benchmark",
  ] + select({
    ":tint_build_spv_writer": [
      "//src/tint/lang/spirv/writer",
      "//src/tint/lang/spirv/writer/common",
    ],
    "//conditions:default": [],
  }),
  copts = COPTS,
  visibility = ["//visibility:public"],
)

alias(
  name = "tint_build_spv_reader",
  actual = "//src/tint:tint_build_spv_reader_true",
)

alias(
  name = "tint_build_spv_writer",
  actual = "//src/tint:tint_build_spv_writer_true",
)

selects.config_setting_group(
    name = "tint_build_spv_reader_or_tint_build_spv_writer",
    match_any = [
        "tint_build_spv_reader",
        "tint_build_spv_writer",
    ],
)

