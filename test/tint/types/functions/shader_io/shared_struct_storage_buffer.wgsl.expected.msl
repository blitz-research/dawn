#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct S {
  /* 0x0000 */ float f;
  /* 0x0004 */ uint u;
  /* 0x0008 */ tint_array<int8_t, 120> tint_pad;
  /* 0x0080 */ float4 v;
  /* 0x0090 */ tint_array<int8_t, 112> tint_pad_1;
};

void assign_and_preserve_padding(device S* const dest, S value) {
  (*(dest)).f = value.f;
  (*(dest)).u = value.u;
  (*(dest)).v = value.v;
}

struct tint_symbol_1 {
  float f [[user(locn0)]];
  uint u [[user(locn1)]] [[flat]];
};

void frag_main_inner(S input, device S* const tint_symbol_3) {
  float const f = input.f;
  uint const u = input.u;
  float4 const v = input.v;
  assign_and_preserve_padding(tint_symbol_3, input);
}

fragment void frag_main(device S* tint_symbol_4 [[buffer(0)]], float4 v [[position]], tint_symbol_1 tint_symbol [[stage_in]]) {
  S const tint_symbol_2 = {.f=tint_symbol.f, .u=tint_symbol.u, .v=v};
  frag_main_inner(tint_symbol_2, tint_symbol_4);
  return;
}

