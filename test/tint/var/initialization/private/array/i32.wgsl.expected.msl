#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_private_vars_struct {
  tint_array<int, 3> zero;
  tint_array<int, 3> init;
};

kernel void tint_symbol() {
  thread tint_private_vars_struct tint_private_vars = {};
  tint_private_vars.init = tint_array<int, 3>{1, 2, 3};
  tint_array<int, 3> v0 = tint_private_vars.zero;
  tint_array<int, 3> v1 = tint_private_vars.init;
  return;
}

