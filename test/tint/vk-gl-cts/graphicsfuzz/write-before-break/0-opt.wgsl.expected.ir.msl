SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: buf0 = struct @align(4) {
  injected:i32 @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %x_9:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void -> %b2 {
  %b2 = block {
    %idx:ptr<function, i32, read_write> = var
    %m43:ptr<function, mat4x3<f32>, read_write> = var
    %ll_1:ptr<function, i32, read_write> = var
    %GLF_live6rows:ptr<function, i32, read_write> = var
    %z:ptr<function, i32, read_write> = var
    %ll_2:ptr<function, i32, read_write> = var
    %ctr:ptr<function, i32, read_write> = var
    %tempm43:ptr<function, mat4x3<f32>, read_write> = var
    %ll_3:ptr<function, i32, read_write> = var
    %c:ptr<function, i32, read_write> = var
    %d:ptr<function, i32, read_write> = var
    %GLF_live6sums:ptr<function, array<f32, 9>, read_write> = var
    store %idx, 0i
    store %m43, mat4x3<f32>(vec3<f32>(1.0f, 0.0f, 0.0f), vec3<f32>(0.0f, 1.0f, 0.0f), vec3<f32>(0.0f, 0.0f, 1.0f), vec3<f32>(0.0f))
    store %ll_1, 0i
    store %GLF_live6rows, 2i
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        %x_18:i32 = load %ll_1
        %17:ptr<uniform, i32, read> = access %x_9, 0u
        %x_19:i32 = load %17
        %19:bool = gte %x_18, %x_19
        if %19 [t: %b5] {  # if_1
          %b5 = block {  # true
            store %x_GLF_color, vec4<f32>(1.0f, 0.0f, 0.0f, 1.0f)
            exit_loop  # loop_1
          }
        }
        %x_20:i32 = load %ll_1
        %21:i32 = add %x_20, 1i
        store %ll_1, %21
        %22:ptr<uniform, i32, read> = access %x_9, 0u
        %x_22:i32 = load %22
        store %z, %x_22
        store %ll_2, 0i
        store %ctr, 0i
        loop [b: %b6, c: %b7] {  # loop_2
          %b6 = block {  # body
            %x_23:i32 = load %ctr
            %25:bool = lt %x_23, 1i
            if %25 [t: %b8, f: %b9] {  # if_2
              %b8 = block {  # true
                exit_if  # if_2
              }
              %b9 = block {  # false
                exit_loop  # loop_2
              }
            }
            %x_24:i32 = load %ll_2
            %27:ptr<uniform, i32, read> = access %x_9, 0u
            %x_25:i32 = load %27
            %29:bool = gte %x_24, %x_25
            if %29 [t: %b10] {  # if_3
              %b10 = block {  # true
                exit_loop  # loop_2
              }
            }
            %x_26:i32 = load %ll_2
            %31:i32 = add %x_26, 1i
            store %ll_2, %31
            %x_98:mat4x3<f32> = load %m43
            store %tempm43, %x_98
            store %ll_3, 0i
            store %c, 0i
            loop [b: %b11, c: %b12] {  # loop_3
              %b11 = block {  # body
                %x_28:i32 = load %z
                %34:bool = lt 1i, %x_28
                if %34 [t: %b13, f: %b14] {  # if_4
                  %b13 = block {  # true
                    exit_if  # if_4
                  }
                  %b14 = block {  # false
                    exit_loop  # loop_3
                  }
                }
                store %d, 0i
                %x_29:i32 = load %c
                %x_30:i32 = load %c
                %x_31:i32 = load %c
                %x_32:i32 = load %d
                %x_33:i32 = load %d
                %x_34:i32 = load %d
                %41:bool = gte %x_29, 0i
                %42:bool = lt %x_30, 4i
                %43:bool = and %41, %42
                %44:i32 = select 0i, %x_31, %43
                %45:ptr<function, vec3<f32>, read_write> = access %tempm43, %44
                %46:bool = gte %x_32, 0i
                %47:bool = lt %x_33, 3i
                %48:bool = and %46, %47
                %49:i32 = select 0i, %x_34, %48
                store_vector_element %45, %49, 1.0f
                continue %b12
              }
              %b12 = block {  # continuing
                %x_35:i32 = load %c
                %51:i32 = add %x_35, 1i
                store %c, %51
                next_iteration %b11
              }
            }
            %x_37:i32 = load %idx
            %x_38:i32 = load %idx
            %x_39:i32 = load %idx
            %55:bool = gte %x_37, 0i
            %56:bool = lt %x_38, 9i
            %57:bool = and %55, %56
            %x_117:i32 = select 0i, %x_39, %57
            %x_40:i32 = load %ctr
            %60:ptr<function, vec3<f32>, read_write> = access %m43, %x_40
            %x_119:f32 = load_vector_element %60, 1u
            %62:ptr<function, f32, read_write> = access %GLF_live6sums, %x_117
            %x_121:f32 = load %62
            %64:ptr<function, f32, read_write> = access %GLF_live6sums, %x_117
            %65:f32 = add %x_121, %x_119
            store %64, %65
            continue %b7
          }
          %b7 = block {  # continuing
            %x_41:i32 = load %ctr
            %67:i32 = add %x_41, 1i
            store %ctr, %67
            next_iteration %b6
          }
        }
        %x_43:i32 = load %idx
        %69:i32 = add %x_43, 1i
        store %idx, %69
        continue %b4
      }
      %b4 = block {  # continuing
        next_iteration %b3
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out -> %b15 {
  %b15 = block {
    %71:void = call %main_1
    %72:vec4<f32> = load %x_GLF_color
    %73:main_out = construct %72
    ret %73
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
