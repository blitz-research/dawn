SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 2> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:f32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr_1, 1> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %x_7:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_11:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void -> %b2 {
  %b2 = block {
    %color:ptr<function, vec4<f32>, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %k:ptr<function, i32, read_write> = var
    store %color, vec4<f32>(1.0f)
    %9:ptr<uniform, i32, read> = access %x_7, 0u, 0i, 0u
    %x_37:i32 = load %9
    store %i, %x_37
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        %x_42:i32 = load %i
        %12:ptr<uniform, i32, read> = access %x_7, 0u, 1i, 0u
        %x_44:i32 = load %12
        %14:bool = lt %x_42, %x_44
        if %14 [t: %b5, f: %b6] {  # if_1
          %b5 = block {  # true
            exit_if  # if_1
          }
          %b6 = block {  # false
            exit_loop  # loop_1
          }
        }
        %x_47:i32 = load %i
        switch %x_47 [c: (2i, %b7), c: (1i, %b8), c: (default, %b9)] {  # switch_1
          %b7 = block {  # case
            %x_83:i32 = load %i
            %17:ptr<uniform, f32, read> = access %x_11, 0u, 0i, 0u
            %x_85:f32 = load %17
            store_vector_element %color, %x_83, %x_85
            exit_switch  # switch_1
          }
          %b8 = block {  # case
            %19:ptr<uniform, i32, read> = access %x_7, 0u, 0i, 0u
            %x_52:i32 = load %19
            store %j, %x_52
            loop [b: %b10, c: %b11] {  # loop_2
              %b10 = block {  # body
                %x_57:i32 = load %i
                %x_58:i32 = load %i
                %23:bool = gt %x_57, %x_58
                if %23 [t: %b12, f: %b13] {  # if_2
                  %b12 = block {  # true
                    exit_if  # if_2
                  }
                  %b13 = block {  # false
                    exit_loop  # loop_2
                  }
                }
                %24:ptr<uniform, i32, read> = access %x_7, 0u, 0i, 0u
                %x_62:i32 = load %24
                store %k, %x_62
                loop [b: %b14, c: %b15] {  # loop_3
                  %b14 = block {  # body
                    %x_67:i32 = load %k
                    %x_68:i32 = load %i
                    %28:bool = lt %x_67, %x_68
                    if %28 [t: %b16, f: %b17] {  # if_3
                      %b16 = block {  # true
                        exit_if  # if_3
                      }
                      %b17 = block {  # false
                        exit_loop  # loop_3
                      }
                    }
                    %x_71:i32 = load %k
                    %30:ptr<uniform, f32, read> = access %x_11, 0u, 0i, 0u
                    %x_73:f32 = load %30
                    store_vector_element %color, %x_71, %x_73
                    continue %b15
                  }
                  %b15 = block {  # continuing
                    %x_75:i32 = load %k
                    %33:i32 = add %x_75, 1i
                    store %k, %33
                    next_iteration %b14
                  }
                }
                continue %b11
              }
              %b11 = block {  # continuing
                %x_77:i32 = load %j
                %35:i32 = add %x_77, 1i
                store %j, %35
                next_iteration %b10
              }
            }
            %x_79:i32 = load %i
            %37:ptr<uniform, f32, read> = access %x_11, 0u, 0i, 0u
            %x_81:f32 = load %37
            store_vector_element %color, %x_79, %x_81
            exit_switch  # switch_1
          }
          %b9 = block {  # case
            exit_switch  # switch_1
          }
        }
        continue %b4
      }
      %b4 = block {  # continuing
        %x_87:i32 = load %i
        %40:i32 = add %x_87, 1i
        store %i, %40
        next_iteration %b3
      }
    }
    %x_89:vec4<f32> = load %color
    store %x_GLF_color, %x_89
    ret
  }
}
%tint_symbol = @fragment func():main_out -> %b18 {
  %b18 = block {
    %43:void = call %main_1
    %44:vec4<f32> = load %x_GLF_color
    %45:main_out = construct %44
    ret %45
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
