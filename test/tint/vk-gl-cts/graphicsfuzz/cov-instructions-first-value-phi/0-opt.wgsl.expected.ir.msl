SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: buf1 = struct @align(8) {
  v1:vec2<f32> @offset(0)
}

strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 5> @offset(0)
}

S = struct @align(4) {
  data:i32 @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %x_8:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_10:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%func_struct_S_i11_ = func(%s:ptr<function, S, read_write>):void -> %b2 {
  %b2 = block {
    %6:ptr<uniform, vec2<f32>, read> = access %x_8, 0u
    %x_166:f32 = load_vector_element %6, 0u
    %8:ptr<uniform, vec2<f32>, read> = access %x_8, 0u
    %x_168:f32 = load_vector_element %8, 1u
    %10:bool = gt %x_166, %x_168
    if %10 [t: %b3] {  # if_1
      %b3 = block {  # true
        ret
      }
    }
    %11:ptr<uniform, i32, read> = access %x_10, 0u, 0i, 0u
    %x_173:i32 = load %11
    %13:ptr<function, i32, read_write> = access %s, 0u
    store %13, %x_173
    ret
  }
}
%main_1 = func():void -> %b4 {
  %b4 = block {
    %i:ptr<function, i32, read_write> = var
    %arr:ptr<function, array<S, 3>, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %param:ptr<function, S, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %x_132:ptr<function, bool, read_write> = var
    %x_142:ptr<function, bool, read_write> = var
    %x_133_phi:ptr<function, bool, read_write> = var
    %x_143_phi:ptr<function, bool, read_write> = var
    %24:ptr<uniform, i32, read> = access %x_10, 0u, 2i, 0u
    %x_46:i32 = load %24
    store %i, %x_46
    loop [b: %b5, c: %b6] {  # loop_1
      %b5 = block {  # body
        %x_51:i32 = load %i
        %27:ptr<uniform, i32, read> = access %x_10, 0u, 0i, 0u
        %x_53:i32 = load %27
        %29:bool = lt %x_51, %x_53
        if %29 [t: %b7, f: %b8] {  # if_2
          %b7 = block {  # true
            exit_if  # if_2
          }
          %b8 = block {  # false
            exit_loop  # loop_1
          }
        }
        %x_56:i32 = load %i
        %x_57:i32 = load %i
        %32:ptr<function, i32, read_write> = access %arr, %x_56, 0u
        store %32, %x_57
        continue %b6
      }
      %b6 = block {  # continuing
        %x_59:i32 = load %i
        %34:i32 = add %x_59, 1i
        store %i, %34
        next_iteration %b5
      }
    }
    %35:ptr<uniform, i32, read> = access %x_10, 0u, 2i, 0u
    %x_62:i32 = load %35
    store %i_1, %x_62
    loop [b: %b9, c: %b10] {  # loop_2
      %b9 = block {  # body
        %x_67:i32 = load %i_1
        %38:ptr<uniform, i32, read> = access %x_10, 0u, 0i, 0u
        %x_69:i32 = load %38
        %40:bool = lt %x_67, %x_69
        if %40 [t: %b11, f: %b12] {  # if_3
          %b11 = block {  # true
            exit_if  # if_3
          }
          %b12 = block {  # false
            exit_loop  # loop_2
          }
        }
        %41:ptr<uniform, vec2<f32>, read> = access %x_8, 0u
        %x_73:f32 = load_vector_element %41, 0u
        %43:ptr<uniform, vec2<f32>, read> = access %x_8, 0u
        %x_75:f32 = load_vector_element %43, 1u
        %45:bool = gt %x_73, %x_75
        if %45 [t: %b13] {  # if_4
          %b13 = block {  # true
            exit_loop  # loop_2
          }
        }
        %x_79:i32 = load %i_1
        %47:ptr<function, i32, read_write> = access %arr, %x_79, 0u
        %x_81:i32 = load %47
        %49:ptr<uniform, i32, read> = access %x_10, 0u, 3i, 0u
        %x_83:i32 = load %49
        %51:bool = eq %x_81, %x_83
        if %51 [t: %b14, f: %b15] {  # if_5
          %b14 = block {  # true
            %x_88:i32 = load %i_1
            %53:ptr<function, S, read_write> = access %arr, %x_88
            %x_90:S = load %53
            store %param, %x_90
            %55:void = call %func_struct_S_i11_, %param
            %x_92:S = load %param
            %57:ptr<function, S, read_write> = access %arr, %x_88
            store %57, %x_92
            exit_if  # if_5
          }
          %b15 = block {  # false
            %58:ptr<uniform, i32, read> = access %x_10, 0u, 2i, 0u
            %x_95:i32 = load %58
            store %j, %x_95
            loop [b: %b16, c: %b17] {  # loop_3
              %b16 = block {  # body
                %x_100:i32 = load %j
                %61:ptr<uniform, i32, read> = access %x_10, 0u, 0i, 0u
                %x_102:i32 = load %61
                %63:bool = lt %x_100, %x_102
                if %63 [t: %b18, f: %b19] {  # if_6
                  %b18 = block {  # true
                    exit_if  # if_6
                  }
                  %b19 = block {  # false
                    exit_loop  # loop_3
                  }
                }
                %x_105:i32 = load %j
                %65:ptr<function, i32, read_write> = access %arr, %x_105, 0u
                %x_107:i32 = load %65
                %67:ptr<uniform, i32, read> = access %x_10, 0u, 4i, 0u
                %x_109:i32 = load %67
                %69:bool = gt %x_107, %x_109
                if %69 [t: %b20] {  # if_7
                  %b20 = block {  # true
                    discard
                    exit_if  # if_7
                  }
                }
                continue %b17
              }
              %b17 = block {  # continuing
                %x_113:i32 = load %j
                %71:i32 = add %x_113, 1i
                store %j, %71
                next_iteration %b16
              }
            }
            exit_if  # if_5
          }
        }
        continue %b10
      }
      %b10 = block {  # continuing
        %x_115:i32 = load %i_1
        %73:i32 = add %x_115, 1i
        store %i_1, %73
        next_iteration %b9
      }
    }
    %74:ptr<uniform, i32, read> = access %x_10, 0u, 2i, 0u
    %x_118:i32 = load %74
    %76:ptr<function, i32, read_write> = access %arr, %x_118, 0u
    %x_120:i32 = load %76
    %78:ptr<uniform, i32, read> = access %x_10, 0u, 2i, 0u
    %x_122:i32 = load %78
    %x_123:bool = eq %x_120, %x_122
    store %x_133_phi, %x_123
    if %x_123 [t: %b21] {  # if_8
      %b21 = block {  # true
        %81:ptr<uniform, i32, read> = access %x_10, 0u, 3i, 0u
        %x_127:i32 = load %81
        %83:ptr<function, i32, read_write> = access %arr, %x_127, 0u
        %x_129:i32 = load %83
        %85:ptr<uniform, i32, read> = access %x_10, 0u, 0i, 0u
        %x_131:i32 = load %85
        %87:bool = eq %x_129, %x_131
        store %x_132, %87
        %88:bool = load %x_132
        store %x_133_phi, %88
        exit_if  # if_8
      }
    }
    %x_133:bool = load %x_133_phi
    store %x_143_phi, %x_133
    if %x_133 [t: %b22] {  # if_9
      %b22 = block {  # true
        %90:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
        %x_137:i32 = load %90
        %92:ptr<function, i32, read_write> = access %arr, %x_137, 0u
        %x_139:i32 = load %92
        %94:ptr<uniform, i32, read> = access %x_10, 0u, 1i, 0u
        %x_141:i32 = load %94
        %96:bool = eq %x_139, %x_141
        store %x_142, %96
        %97:bool = load %x_142
        store %x_143_phi, %97
        exit_if  # if_9
      }
    }
    %x_143:bool = load %x_143_phi
    if %x_143 [t: %b23, f: %b24] {  # if_10
      %b23 = block {  # true
        %99:ptr<uniform, i32, read> = access %x_10, 0u, 3i, 0u
        %x_148:i32 = load %99
        %101:ptr<uniform, i32, read> = access %x_10, 0u, 2i, 0u
        %x_151:i32 = load %101
        %103:ptr<uniform, i32, read> = access %x_10, 0u, 2i, 0u
        %x_154:i32 = load %103
        %105:ptr<uniform, i32, read> = access %x_10, 0u, 3i, 0u
        %x_157:i32 = load %105
        %107:f32 = convert %x_148
        %108:f32 = convert %x_151
        %109:f32 = convert %x_154
        %110:f32 = convert %x_157
        %111:vec4<f32> = construct %107, %108, %109, %110
        store %x_GLF_color, %111
        exit_if  # if_10
      }
      %b24 = block {  # false
        %112:ptr<uniform, i32, read> = access %x_10, 0u, 2i, 0u
        %x_161:i32 = load %112
        %x_162:f32 = convert %x_161
        %115:vec4<f32> = construct %x_162, %x_162, %x_162, %x_162
        store %x_GLF_color, %115
        exit_if  # if_10
      }
    }
    ret
  }
}
%tint_symbol = @fragment func():main_out -> %b25 {
  %b25 = block {
    %117:void = call %main_1
    %118:vec4<f32> = load %x_GLF_color
    %119:main_out = construct %118
    ret %119
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
