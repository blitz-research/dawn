SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: QuicksortObject = struct @align(4) {
  numbers:array<i32, 10> @offset(0)
}

buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  frag_color_1:vec4<f32> @offset(0), @location(0)
  gl_Position:vec4<f32> @offset(16), @builtin(position)
}

%b1 = block {  # root
  %obj:ptr<private, QuicksortObject, read_write> = var
  %x_GLF_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_pos:ptr<private, vec4<f32>, read_write> = var
  %x_34:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %frag_color:ptr<private, vec4<f32>, read_write> = var
  %gl_Position:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void -> %b2 {
  %b2 = block {
    %x_90:ptr<function, i32, read_write> = var
    %x_91:ptr<function, i32, read_write> = var
    %x_92:ptr<function, i32, read_write> = var
    %x_93:ptr<function, i32, read_write> = var
    %x_94:ptr<function, i32, read_write> = var
    %x_95:ptr<function, i32, read_write> = var
    %x_96:ptr<function, i32, read_write> = var
    %x_97:ptr<function, i32, read_write> = var
    %x_98:ptr<function, i32, read_write> = var
    %x_99:ptr<function, i32, read_write> = var
    %x_100:ptr<function, i32, read_write> = var
    %x_101:ptr<function, i32, read_write> = var
    %x_102:ptr<function, i32, read_write> = var
    %x_103:ptr<function, array<i32, 10>, read_write> = var
    %x_104:ptr<function, i32, read_write> = var
    %x_105:ptr<function, i32, read_write> = var
    %x_106:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %uv:ptr<function, vec2<f32>, read_write> = var
    %color:ptr<function, vec3<f32>, read_write> = var
    %x_107:vec4<f32> = load %x_GLF_pos
    %29:vec4<f32> = add %x_107, vec4<f32>(1.0f, 1.0f, 0.0f, 0.0f)
    %30:vec4<f32> = mul %29, vec4<f32>(128.0f, 128.0f, 1.0f, 1.0f)
    store %x_GLF_FragCoord, %30
    store %i_2, 0i
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        %x_114:i32 = load %i_2
        %32:bool = lt %x_114, 10i
        if %32 [t: %b5, f: %b6] {  # if_1
          %b5 = block {  # true
            exit_if  # if_1
          }
          %b6 = block {  # false
            exit_loop  # loop_1
          }
        }
        %x_117:i32 = load %i_2
        %x_118:i32 = load %i_2
        %35:ptr<private, i32, read_write> = access %obj, 0u, %x_117
        %36:i32 = sub 10i, %x_118
        store %35, %36
        %x_121:i32 = load %i_2
        %x_122:i32 = load %i_2
        %39:ptr<private, i32, read_write> = access %obj, 0u, %x_122
        %x_124:i32 = load %39
        %x_125:i32 = load %i_2
        %42:ptr<private, i32, read_write> = access %obj, 0u, %x_125
        %x_127:i32 = load %42
        %44:ptr<private, i32, read_write> = access %obj, 0u, %x_121
        %45:i32 = mul %x_124, %x_127
        store %44, %45
        continue %b4
      }
      %b4 = block {  # continuing
        %x_130:i32 = load %i_2
        %47:i32 = add %x_130, 1i
        store %i_2, %47
        next_iteration %b3
      }
    }
    store %x_100, 0i
    store %x_101, 9i
    store %x_102, -1i
    %x_132:i32 = load %x_102
    %x_133:i32 = add %x_132, 1i
    store %x_102, %x_133
    %x_134:i32 = load %x_100
    %51:ptr<function, i32, read_write> = access %x_103, %x_133
    store %51, %x_134
    %x_136:i32 = load %x_102
    %x_137:i32 = add %x_136, 1i
    store %x_102, %x_137
    %x_138:i32 = load %x_101
    %55:ptr<function, i32, read_write> = access %x_103, %x_137
    store %55, %x_138
    loop [b: %b7, c: %b8] {  # loop_2
      %b7 = block {  # body
        %x_144:i32 = load %x_102
        %57:bool = gte %x_144, 0i
        if %57 [t: %b9, f: %b10] {  # if_2
          %b9 = block {  # true
            exit_if  # if_2
          }
          %b10 = block {  # false
            exit_loop  # loop_2
          }
        }
        %x_147:i32 = load %x_102
        %59:i32 = sub %x_147, 1i
        store %x_102, %59
        %60:ptr<function, i32, read_write> = access %x_103, %x_147
        %x_150:i32 = load %60
        store %x_101, %x_150
        %x_151:i32 = load %x_102
        %63:i32 = sub %x_151, 1i
        store %x_102, %63
        %64:ptr<function, i32, read_write> = access %x_103, %x_151
        %x_154:i32 = load %64
        store %x_100, %x_154
        %x_155:i32 = load %x_100
        store %x_105, %x_155
        %x_156:i32 = load %x_101
        store %x_106, %x_156
        %x_157:i32 = load %x_106
        %69:ptr<private, i32, read_write> = access %obj, 0u, %x_157
        %x_159:i32 = load %69
        store %x_92, %x_159
        %x_160:i32 = load %x_105
        %72:i32 = sub %x_160, 1i
        store %x_93, %72
        %x_162:i32 = load %x_105
        store %x_94, %x_162
        loop [b: %b11, c: %b12] {  # loop_3
          %b11 = block {  # body
            %x_167:i32 = load %x_94
            %x_168:i32 = load %x_106
            %76:i32 = sub %x_168, 1i
            %77:bool = lte %x_167, %76
            if %77 [t: %b13, f: %b14] {  # if_3
              %b13 = block {  # true
                exit_if  # if_3
              }
              %b14 = block {  # false
                exit_loop  # loop_3
              }
            }
            %x_172:i32 = load %x_94
            %79:ptr<private, i32, read_write> = access %obj, 0u, %x_172
            %x_174:i32 = load %79
            %x_175:i32 = load %x_92
            %82:bool = lte %x_174, %x_175
            if %82 [t: %b15] {  # if_4
              %b15 = block {  # true
                %x_179:i32 = load %x_93
                %84:i32 = add %x_179, 1i
                store %x_93, %84
                %x_181:i32 = load %x_93
                store %x_95, %x_181
                %x_182:i32 = load %x_94
                store %x_96, %x_182
                %x_183:i32 = load %x_95
                %88:ptr<private, i32, read_write> = access %obj, 0u, %x_183
                %x_185:i32 = load %88
                store %x_91, %x_185
                %x_186:i32 = load %x_95
                %x_187:i32 = load %x_96
                %92:ptr<private, i32, read_write> = access %obj, 0u, %x_187
                %x_189:i32 = load %92
                %94:ptr<private, i32, read_write> = access %obj, 0u, %x_186
                store %94, %x_189
                %x_191:i32 = load %x_96
                %x_192:i32 = load %x_91
                %97:ptr<private, i32, read_write> = access %obj, 0u, %x_191
                store %97, %x_192
                exit_if  # if_4
              }
            }
            continue %b12
          }
          %b12 = block {  # continuing
            %x_194:i32 = load %x_94
            %99:i32 = add %x_194, 1i
            store %x_94, %99
            next_iteration %b11
          }
        }
        %x_196:i32 = load %x_93
        %101:i32 = add %x_196, 1i
        store %x_97, %101
        %x_198:i32 = load %x_106
        store %x_98, %x_198
        %x_199:i32 = load %x_97
        %104:ptr<private, i32, read_write> = access %obj, 0u, %x_199
        %x_201:i32 = load %104
        store %x_90, %x_201
        %x_202:i32 = load %x_97
        %x_203:i32 = load %x_98
        %108:ptr<private, i32, read_write> = access %obj, 0u, %x_203
        %x_205:i32 = load %108
        %110:ptr<private, i32, read_write> = access %obj, 0u, %x_202
        store %110, %x_205
        %x_207:i32 = load %x_98
        %x_208:i32 = load %x_90
        %113:ptr<private, i32, read_write> = access %obj, 0u, %x_207
        store %113, %x_208
        %x_210:i32 = load %x_93
        %115:i32 = add %x_210, 1i
        store %x_99, %115
        %x_212:i32 = load %x_99
        store %x_104, %x_212
        %x_213:i32 = load %x_104
        %x_215:i32 = load %x_100
        %119:i32 = sub %x_213, 1i
        %120:bool = gt %119, %x_215
        if %120 [t: %b16] {  # if_5
          %b16 = block {  # true
            %x_219:i32 = load %x_102
            %x_220:i32 = add %x_219, 1i
            store %x_102, %x_220
            %x_221:i32 = load %x_100
            %124:ptr<function, i32, read_write> = access %x_103, %x_220
            store %124, %x_221
            %x_223:i32 = load %x_102
            %x_224:i32 = add %x_223, 1i
            store %x_102, %x_224
            %x_225:i32 = load %x_104
            %128:ptr<function, i32, read_write> = access %x_103, %x_224
            %129:i32 = sub %x_225, 1i
            store %128, %129
            exit_if  # if_5
          }
        }
        %x_228:i32 = load %x_104
        %x_230:i32 = load %x_101
        %132:i32 = add %x_228, 1i
        %133:bool = lt %132, %x_230
        if %133 [t: %b17] {  # if_6
          %b17 = block {  # true
            %x_234:i32 = load %x_102
            %x_235:i32 = add %x_234, 1i
            store %x_102, %x_235
            %x_236:i32 = load %x_104
            %137:ptr<function, i32, read_write> = access %x_103, %x_235
            %138:i32 = add %x_236, 1i
            store %137, %138
            %x_239:i32 = load %x_102
            %x_240:i32 = add %x_239, 1i
            store %x_102, %x_240
            %x_241:i32 = load %x_101
            %142:ptr<function, i32, read_write> = access %x_103, %x_240
            store %142, %x_241
            exit_if  # if_6
          }
        }
        continue %b8
      }
      %b8 = block {  # continuing
        next_iteration %b7
      }
    }
    %x_243:vec4<f32> = load %x_GLF_FragCoord
    %144:ptr<uniform, vec2<f32>, read> = access %x_34, 0u
    %x_246:vec2<f32> = load %144
    %146:f32 = access %x_243, 0u
    %147:f32 = access %x_243, 1u
    %148:vec2<f32> = construct %146, %147
    %149:vec2<f32> = div %148, %x_246
    store %uv, %149
    store %color, vec3<f32>(1.0f, 2.0f, 3.0f)
    %150:ptr<private, i32, read_write> = access %obj, 0u, 0i
    %x_249:i32 = load %150
    %x_252:f32 = load_vector_element %color, 0u
    %153:f32 = convert %x_249
    %154:f32 = add %x_252, %153
    store_vector_element %color, 0u, %154
    %x_256:f32 = load_vector_element %uv, 0u
    %156:bool = gt %x_256, 0.25f
    if %156 [t: %b18] {  # if_7
      %b18 = block {  # true
        %157:ptr<private, i32, read_write> = access %obj, 0u, 1i
        %x_261:i32 = load %157
        %x_264:f32 = load_vector_element %color, 0u
        %160:f32 = convert %x_261
        %161:f32 = add %x_264, %160
        store_vector_element %color, 0u, %161
        exit_if  # if_7
      }
    }
    %x_268:f32 = load_vector_element %uv, 0u
    %163:bool = gt %x_268, 0.5f
    if %163 [t: %b19] {  # if_8
      %b19 = block {  # true
        %164:ptr<private, i32, read_write> = access %obj, 0u, 2i
        %x_273:i32 = load %164
        %x_276:f32 = load_vector_element %color, 1u
        %167:f32 = convert %x_273
        %168:f32 = add %x_276, %167
        store_vector_element %color, 1u, %168
        exit_if  # if_8
      }
    }
    %x_280:f32 = load_vector_element %uv, 0u
    %170:bool = gt %x_280, 0.75f
    if %170 [t: %b20] {  # if_9
      %b20 = block {  # true
        %171:ptr<private, i32, read_write> = access %obj, 0u, 3i
        %x_285:i32 = load %171
        %x_288:f32 = load_vector_element %color, 2u
        %174:f32 = convert %x_285
        %175:f32 = add %x_288, %174
        store_vector_element %color, 2u, %175
        exit_if  # if_9
      }
    }
    %176:ptr<private, i32, read_write> = access %obj, 0u, 4i
    %x_292:i32 = load %176
    %x_295:f32 = load_vector_element %color, 1u
    %179:f32 = convert %x_292
    %180:f32 = add %x_295, %179
    store_vector_element %color, 1u, %180
    %x_299:f32 = load_vector_element %uv, 1u
    %182:bool = gt %x_299, 0.25f
    if %182 [t: %b21] {  # if_10
      %b21 = block {  # true
        %183:ptr<private, i32, read_write> = access %obj, 0u, 5i
        %x_304:i32 = load %183
        %x_307:f32 = load_vector_element %color, 0u
        %186:f32 = convert %x_304
        %187:f32 = add %x_307, %186
        store_vector_element %color, 0u, %187
        exit_if  # if_10
      }
    }
    %x_311:f32 = load_vector_element %uv, 1u
    %189:bool = gt %x_311, 0.5f
    if %189 [t: %b22] {  # if_11
      %b22 = block {  # true
        %190:ptr<private, i32, read_write> = access %obj, 0u, 6i
        %x_316:i32 = load %190
        %x_319:f32 = load_vector_element %color, 1u
        %193:f32 = convert %x_316
        %194:f32 = add %x_319, %193
        store_vector_element %color, 1u, %194
        exit_if  # if_11
      }
    }
    %x_323:f32 = load_vector_element %uv, 1u
    %196:bool = gt %x_323, 0.75f
    if %196 [t: %b23] {  # if_12
      %b23 = block {  # true
        %197:ptr<private, i32, read_write> = access %obj, 0u, 7i
        %x_328:i32 = load %197
        %x_331:f32 = load_vector_element %color, 2u
        %200:f32 = convert %x_328
        %201:f32 = add %x_331, %200
        store_vector_element %color, 2u, %201
        exit_if  # if_12
      }
    }
    %202:ptr<private, i32, read_write> = access %obj, 0u, 8i
    %x_335:i32 = load %202
    %x_338:f32 = load_vector_element %color, 2u
    %205:f32 = convert %x_335
    %206:f32 = add %x_338, %205
    store_vector_element %color, 2u, %206
    %x_342:f32 = load_vector_element %uv, 0u
    %x_344:f32 = load_vector_element %uv, 1u
    %209:f32 = sub %x_342, %x_344
    %210:f32 = abs %209
    %211:bool = lt %210, 0.25f
    if %211 [t: %b24] {  # if_13
      %b24 = block {  # true
        %212:ptr<private, i32, read_write> = access %obj, 0u, 9i
        %x_351:i32 = load %212
        %x_354:f32 = load_vector_element %color, 0u
        %215:f32 = convert %x_351
        %216:f32 = add %x_354, %215
        store_vector_element %color, 0u, %216
        exit_if  # if_13
      }
    }
    %x_357:vec3<f32> = load %color
    %x_358:vec3<f32> = normalize %x_357
    %219:f32 = access %x_358, 0u
    %220:f32 = access %x_358, 1u
    %221:f32 = access %x_358, 2u
    %222:vec4<f32> = construct %219, %220, %221, 1.0f
    store %frag_color, %222
    %x_363:vec4<f32> = load %x_GLF_pos
    store %gl_Position, %x_363
    ret
  }
}
%tint_symbol = @vertex func(%x_GLF_pos_param:vec4<f32> [@location(0)]):main_out -> %b25 {
  %b25 = block {
    store %x_GLF_pos, %x_GLF_pos_param
    %226:void = call %main_1
    %227:vec4<f32> = load %frag_color
    %228:vec4<f32> = load %gl_Position
    %229:main_out = construct %227, %228
    ret %229
  }
}
%swap_i1_i1_ = func(%i:ptr<function, i32, read_write>, %j:ptr<function, i32, read_write>):void -> %b26 {
  %b26 = block {
    %temp:ptr<function, i32, read_write> = var
    %x_366:i32 = load %i
    %235:ptr<private, i32, read_write> = access %obj, 0u, %x_366
    %x_368:i32 = load %235
    store %temp, %x_368
    %x_369:i32 = load %i
    %x_370:i32 = load %j
    %239:ptr<private, i32, read_write> = access %obj, 0u, %x_370
    %x_372:i32 = load %239
    %241:ptr<private, i32, read_write> = access %obj, 0u, %x_369
    store %241, %x_372
    %x_374:i32 = load %j
    %x_375:i32 = load %temp
    %244:ptr<private, i32, read_write> = access %obj, 0u, %x_374
    store %244, %x_375
    ret
  }
}
%performPartition_i1_i1_ = func(%l:ptr<function, i32, read_write>, %h:ptr<function, i32, read_write>):i32 -> %b27 {
  %b27 = block {
    %pivot:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    %param_3:ptr<function, i32, read_write> = var
    %x_378:i32 = load %h
    %256:ptr<private, i32, read_write> = access %obj, 0u, %x_378
    %x_380:i32 = load %256
    store %pivot, %x_380
    %x_381:i32 = load %l
    %259:i32 = sub %x_381, 1i
    store %i_1, %259
    %x_383:i32 = load %l
    store %j_1, %x_383
    loop [b: %b28, c: %b29] {  # loop_4
      %b28 = block {  # body
        %x_388:i32 = load %j_1
        %x_389:i32 = load %h
        %263:i32 = sub %x_389, 1i
        %264:bool = lte %x_388, %263
        if %264 [t: %b30, f: %b31] {  # if_14
          %b30 = block {  # true
            exit_if  # if_14
          }
          %b31 = block {  # false
            exit_loop  # loop_4
          }
        }
        %x_393:i32 = load %j_1
        %266:ptr<private, i32, read_write> = access %obj, 0u, %x_393
        %x_395:i32 = load %266
        %x_396:i32 = load %pivot
        %269:bool = lte %x_395, %x_396
        if %269 [t: %b32] {  # if_15
          %b32 = block {  # true
            %x_400:i32 = load %i_1
            %271:i32 = add %x_400, 1i
            store %i_1, %271
            %x_402:i32 = load %i_1
            store %param, %x_402
            %x_403:i32 = load %j_1
            store %param_1, %x_403
            %274:void = call %swap_i1_i1_, %param, %param_1
            exit_if  # if_15
          }
        }
        continue %b29
      }
      %b29 = block {  # continuing
        %x_405:i32 = load %j_1
        %276:i32 = add %x_405, 1i
        store %j_1, %276
        next_iteration %b28
      }
    }
    %x_407:i32 = load %i_1
    %278:i32 = add %x_407, 1i
    store %param_2, %278
    %x_409:i32 = load %h
    store %param_3, %x_409
    %280:void = call %swap_i1_i1_, %param_2, %param_3
    %x_411:i32 = load %i_1
    %282:i32 = add %x_411, 1i
    ret %282
  }
}
%quicksort_ = func():void -> %b33 {
  %b33 = block {
    %l_1:ptr<function, i32, read_write> = var
    %h_1:ptr<function, i32, read_write> = var
    %top:ptr<function, i32, read_write> = var
    %stack:ptr<function, array<i32, 10>, read_write> = var
    %p:ptr<function, i32, read_write> = var
    %param_4:ptr<function, i32, read_write> = var
    %param_5:ptr<function, i32, read_write> = var
    store %l_1, 0i
    store %h_1, 9i
    store %top, -1i
    %x_414:i32 = load %top
    %x_415:i32 = add %x_414, 1i
    store %top, %x_415
    %x_416:i32 = load %l_1
    %294:ptr<function, i32, read_write> = access %stack, %x_415
    store %294, %x_416
    %x_418:i32 = load %top
    %x_419:i32 = add %x_418, 1i
    store %top, %x_419
    %x_420:i32 = load %h_1
    %298:ptr<function, i32, read_write> = access %stack, %x_419
    store %298, %x_420
    loop [b: %b34, c: %b35] {  # loop_5
      %b34 = block {  # body
        %x_426:i32 = load %top
        %300:bool = gte %x_426, 0i
        if %300 [t: %b36, f: %b37] {  # if_16
          %b36 = block {  # true
            exit_if  # if_16
          }
          %b37 = block {  # false
            exit_loop  # loop_5
          }
        }
        %x_429:i32 = load %top
        %302:i32 = sub %x_429, 1i
        store %top, %302
        %303:ptr<function, i32, read_write> = access %stack, %x_429
        %x_432:i32 = load %303
        store %h_1, %x_432
        %x_433:i32 = load %top
        %306:i32 = sub %x_433, 1i
        store %top, %306
        %307:ptr<function, i32, read_write> = access %stack, %x_433
        %x_436:i32 = load %307
        store %l_1, %x_436
        %x_437:i32 = load %l_1
        store %param_4, %x_437
        %x_438:i32 = load %h_1
        store %param_5, %x_438
        %x_439:i32 = call %performPartition_i1_i1_, %param_4, %param_5
        store %p, %x_439
        %x_440:i32 = load %p
        %x_442:i32 = load %l_1
        %314:i32 = sub %x_440, 1i
        %315:bool = gt %314, %x_442
        if %315 [t: %b38] {  # if_17
          %b38 = block {  # true
            %x_446:i32 = load %top
            %x_447:i32 = add %x_446, 1i
            store %top, %x_447
            %x_448:i32 = load %l_1
            %319:ptr<function, i32, read_write> = access %stack, %x_447
            store %319, %x_448
            %x_450:i32 = load %top
            %x_451:i32 = add %x_450, 1i
            store %top, %x_451
            %x_452:i32 = load %p
            %323:ptr<function, i32, read_write> = access %stack, %x_451
            %324:i32 = sub %x_452, 1i
            store %323, %324
            exit_if  # if_17
          }
        }
        %x_455:i32 = load %p
        %x_457:i32 = load %h_1
        %327:i32 = add %x_455, 1i
        %328:bool = lt %327, %x_457
        if %328 [t: %b39] {  # if_18
          %b39 = block {  # true
            %x_461:i32 = load %top
            %x_462:i32 = add %x_461, 1i
            store %top, %x_462
            %x_463:i32 = load %p
            %332:ptr<function, i32, read_write> = access %stack, %x_462
            %333:i32 = add %x_463, 1i
            store %332, %333
            %x_466:i32 = load %top
            %x_467:i32 = add %x_466, 1i
            store %top, %x_467
            %x_468:i32 = load %h_1
            %337:ptr<function, i32, read_write> = access %stack, %x_467
            store %337, %x_468
            exit_if  # if_18
          }
        }
        continue %b35
      }
      %b35 = block {  # continuing
        next_iteration %b34
      }
    }
    ret
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
