SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: QuicksortObject = struct @align(4) {
  numbers:array<i32, 10> @offset(0)
}

buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %obj:ptr<private, QuicksortObject, read_write> = var
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_32:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%swap_i1_i1_ = func(%i:ptr<function, i32, read_write>, %j:ptr<function, i32, read_write>):void -> %b2 {
  %b2 = block {
    %temp:ptr<function, i32, read_write> = var
    %x_225:i32 = load %i
    %10:ptr<private, i32, read_write> = access %obj, 0u, %x_225
    %x_227:i32 = load %10
    store %temp, %x_227
    %x_228:i32 = load %i
    %x_229:i32 = load %j
    %14:ptr<private, i32, read_write> = access %obj, 0u, %x_229
    %x_231:i32 = load %14
    %16:ptr<private, i32, read_write> = access %obj, 0u, %x_228
    store %16, %x_231
    %x_233:i32 = load %j
    %x_234:i32 = load %temp
    %19:ptr<private, i32, read_write> = access %obj, 0u, %x_233
    store %19, %x_234
    ret
  }
}
%performPartition_i1_i1_ = func(%l:ptr<function, i32, read_write>, %h:ptr<function, i32, read_write>):i32 -> %b3 {
  %b3 = block {
    %pivot:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    %param_3:ptr<function, i32, read_write> = var
    %x_237:i32 = load %h
    %31:ptr<private, i32, read_write> = access %obj, 0u, %x_237
    %x_239:i32 = load %31
    store %pivot, %x_239
    %x_240:i32 = load %l
    %34:i32 = sub %x_240, 1i
    store %i_1, %34
    %x_242:i32 = load %l
    store %j_1, %x_242
    loop [b: %b4, c: %b5] {  # loop_1
      %b4 = block {  # body
        %x_247:i32 = load %j_1
        %x_248:i32 = load %h
        %38:i32 = sub %x_248, 1i
        %39:bool = lte %x_247, %38
        if %39 [t: %b6, f: %b7] {  # if_1
          %b6 = block {  # true
            exit_if  # if_1
          }
          %b7 = block {  # false
            exit_loop  # loop_1
          }
        }
        %x_252:i32 = load %j_1
        %41:ptr<private, i32, read_write> = access %obj, 0u, %x_252
        %x_254:i32 = load %41
        %x_255:i32 = load %pivot
        %44:bool = lte %x_254, %x_255
        if %44 [t: %b8] {  # if_2
          %b8 = block {  # true
            %x_259:i32 = load %i_1
            %46:i32 = add %x_259, 1i
            store %i_1, %46
            %x_261:i32 = load %i_1
            store %param, %x_261
            %x_262:i32 = load %j_1
            store %param_1, %x_262
            %49:void = call %swap_i1_i1_, %param, %param_1
            exit_if  # if_2
          }
        }
        continue %b5
      }
      %b5 = block {  # continuing
        %x_264:i32 = load %j_1
        %51:i32 = add %x_264, 1i
        store %j_1, %51
        next_iteration %b4
      }
    }
    %x_266:i32 = load %i_1
    %53:i32 = add %x_266, 1i
    store %i_1, %53
    %x_268:i32 = load %i_1
    store %param_2, %x_268
    %x_269:i32 = load %h
    store %param_3, %x_269
    %56:void = call %swap_i1_i1_, %param_2, %param_3
    %x_271:i32 = load %i_1
    ret %x_271
  }
}
%quicksort_ = func():void -> %b9 {
  %b9 = block {
    %l_1:ptr<function, i32, read_write> = var
    %h_1:ptr<function, i32, read_write> = var
    %top:ptr<function, i32, read_write> = var
    %stack:ptr<function, array<i32, 10>, read_write> = var
    %p:ptr<function, i32, read_write> = var
    %param_4:ptr<function, i32, read_write> = var
    %param_5:ptr<function, i32, read_write> = var
    store %l_1, 0i
    store %h_1, 9i
    store %top, -1i
    %x_273:i32 = load %top
    %x_274:i32 = add %x_273, 1i
    store %top, %x_274
    %x_275:i32 = load %l_1
    %69:ptr<function, i32, read_write> = access %stack, %x_274
    store %69, %x_275
    %x_277:i32 = load %top
    %x_278:i32 = add %x_277, 1i
    store %top, %x_278
    %x_279:i32 = load %h_1
    %73:ptr<function, i32, read_write> = access %stack, %x_278
    store %73, %x_279
    loop [b: %b10, c: %b11] {  # loop_2
      %b10 = block {  # body
        %x_285:i32 = load %top
        %75:bool = gte %x_285, 0i
        if %75 [t: %b12, f: %b13] {  # if_3
          %b12 = block {  # true
            exit_if  # if_3
          }
          %b13 = block {  # false
            exit_loop  # loop_2
          }
        }
        %x_288:i32 = load %top
        %77:i32 = sub %x_288, 1i
        store %top, %77
        %78:ptr<function, i32, read_write> = access %stack, %x_288
        %x_291:i32 = load %78
        store %h_1, %x_291
        %x_292:i32 = load %top
        %81:i32 = sub %x_292, 1i
        store %top, %81
        %82:ptr<function, i32, read_write> = access %stack, %x_292
        %x_295:i32 = load %82
        store %l_1, %x_295
        %x_296:i32 = load %l_1
        store %param_4, %x_296
        %x_297:i32 = load %h_1
        store %param_5, %x_297
        %x_298:i32 = call %performPartition_i1_i1_, %param_4, %param_5
        store %p, %x_298
        %x_299:i32 = load %p
        %x_301:i32 = load %l_1
        %89:i32 = sub %x_299, 1i
        %90:bool = gt %89, %x_301
        if %90 [t: %b14] {  # if_4
          %b14 = block {  # true
            %x_305:i32 = load %top
            %x_306:i32 = add %x_305, 1i
            store %top, %x_306
            %x_307:i32 = load %l_1
            %94:ptr<function, i32, read_write> = access %stack, %x_306
            store %94, %x_307
            %x_309:i32 = load %top
            %x_310:i32 = add %x_309, 1i
            store %top, %x_310
            %x_311:i32 = load %p
            %98:ptr<function, i32, read_write> = access %stack, %x_310
            %99:i32 = sub %x_311, 1i
            store %98, %99
            exit_if  # if_4
          }
        }
        %x_314:i32 = load %p
        %x_316:i32 = load %h_1
        %102:i32 = add %x_314, 1i
        %103:bool = lt %102, %x_316
        if %103 [t: %b15] {  # if_5
          %b15 = block {  # true
            %x_320:i32 = load %top
            %x_321:i32 = add %x_320, 1i
            store %top, %x_321
            %x_322:i32 = load %p
            %107:ptr<function, i32, read_write> = access %stack, %x_321
            %108:i32 = add %x_322, 1i
            store %107, %108
            %x_325:i32 = load %top
            %x_326:i32 = add %x_325, 1i
            store %top, %x_326
            %x_327:i32 = load %h_1
            %112:ptr<function, i32, read_write> = access %stack, %x_326
            store %112, %x_327
            exit_if  # if_5
          }
        }
        continue %b11
      }
      %b11 = block {  # continuing
        next_iteration %b10
      }
    }
    ret
  }
}
%main_1 = func():void -> %b16 {
  %b16 = block {
    %i_2:ptr<function, i32, read_write> = var
    %uv:ptr<function, vec2<f32>, read_write> = var
    %color:ptr<function, vec3<f32>, read_write> = var
    store %i_2, 0i
    loop [b: %b17, c: %b18] {  # loop_3
      %b17 = block {  # body
        %x_85:i32 = load %i_2
        %118:bool = lt %x_85, 10i
        if %118 [t: %b19, f: %b20] {  # if_6
          %b19 = block {  # true
            exit_if  # if_6
          }
          %b20 = block {  # false
            exit_loop  # loop_3
          }
        }
        %x_88:i32 = load %i_2
        %x_89:i32 = load %i_2
        %121:ptr<private, i32, read_write> = access %obj, 0u, %x_88
        %122:i32 = sub 10i, %x_89
        store %121, %122
        %x_92:i32 = load %i_2
        %x_93:i32 = load %i_2
        %125:ptr<private, i32, read_write> = access %obj, 0u, %x_93
        %x_95:i32 = load %125
        %x_96:i32 = load %i_2
        %128:ptr<private, i32, read_write> = access %obj, 0u, %x_96
        %x_98:i32 = load %128
        %130:ptr<private, i32, read_write> = access %obj, 0u, %x_92
        %131:i32 = mul %x_95, %x_98
        store %130, %131
        continue %b18
      }
      %b18 = block {  # continuing
        %x_101:i32 = load %i_2
        %133:i32 = add %x_101, 1i
        store %i_2, %133
        next_iteration %b17
      }
    }
    %134:void = call %quicksort_
    %x_104:vec4<f32> = load %gl_FragCoord
    %136:ptr<uniform, vec2<f32>, read> = access %x_32, 0u
    %x_107:vec2<f32> = load %136
    %138:f32 = access %x_104, 0u
    %139:f32 = access %x_104, 1u
    %140:vec2<f32> = construct %138, %139
    %141:vec2<f32> = div %140, %x_107
    store %uv, %141
    store %color, vec3<f32>(1.0f, 2.0f, 3.0f)
    %142:ptr<private, i32, read_write> = access %obj, 0u, 0i
    %x_110:i32 = load %142
    %x_113:f32 = load_vector_element %color, 0u
    %145:f32 = convert %x_110
    %146:f32 = add %x_113, %145
    store_vector_element %color, 0u, %146
    %x_117:f32 = load_vector_element %uv, 0u
    %148:bool = gt %x_117, 0.25f
    if %148 [t: %b21] {  # if_7
      %b21 = block {  # true
        %149:ptr<private, i32, read_write> = access %obj, 0u, 1i
        %x_122:i32 = load %149
        %x_125:f32 = load_vector_element %color, 0u
        %152:f32 = convert %x_122
        %153:f32 = add %x_125, %152
        store_vector_element %color, 0u, %153
        exit_if  # if_7
      }
    }
    %x_129:f32 = load_vector_element %uv, 0u
    %155:bool = gt %x_129, 0.5f
    if %155 [t: %b22] {  # if_8
      %b22 = block {  # true
        %156:ptr<private, i32, read_write> = access %obj, 0u, 2i
        %x_134:i32 = load %156
        %x_137:f32 = load_vector_element %color, 1u
        %159:f32 = convert %x_134
        %160:f32 = add %x_137, %159
        store_vector_element %color, 1u, %160
        exit_if  # if_8
      }
    }
    %x_141:f32 = load_vector_element %uv, 0u
    %162:bool = gt %x_141, 0.75f
    if %162 [t: %b23] {  # if_9
      %b23 = block {  # true
        %163:ptr<private, i32, read_write> = access %obj, 0u, 3i
        %x_146:i32 = load %163
        %x_149:f32 = load_vector_element %color, 2u
        %166:f32 = convert %x_146
        %167:f32 = add %x_149, %166
        store_vector_element %color, 2u, %167
        exit_if  # if_9
      }
    }
    %168:ptr<private, i32, read_write> = access %obj, 0u, 4i
    %x_153:i32 = load %168
    %x_156:f32 = load_vector_element %color, 1u
    %171:f32 = convert %x_153
    %172:f32 = add %x_156, %171
    store_vector_element %color, 1u, %172
    %x_160:f32 = load_vector_element %uv, 1u
    %174:bool = gt %x_160, 0.25f
    if %174 [t: %b24] {  # if_10
      %b24 = block {  # true
        %175:ptr<private, i32, read_write> = access %obj, 0u, 5i
        %x_165:i32 = load %175
        %x_168:f32 = load_vector_element %color, 0u
        %178:f32 = convert %x_165
        %179:f32 = add %x_168, %178
        store_vector_element %color, 0u, %179
        exit_if  # if_10
      }
    }
    %x_172:f32 = load_vector_element %uv, 1u
    %181:bool = gt %x_172, 0.5f
    if %181 [t: %b25] {  # if_11
      %b25 = block {  # true
        %182:ptr<private, i32, read_write> = access %obj, 0u, 6i
        %x_177:i32 = load %182
        %x_180:f32 = load_vector_element %color, 1u
        %185:f32 = convert %x_177
        %186:f32 = add %x_180, %185
        store_vector_element %color, 1u, %186
        exit_if  # if_11
      }
    }
    %x_184:f32 = load_vector_element %uv, 1u
    %188:bool = gt %x_184, 0.75f
    if %188 [t: %b26] {  # if_12
      %b26 = block {  # true
        %189:ptr<private, i32, read_write> = access %obj, 0u, 7i
        %x_189:i32 = load %189
        %x_192:f32 = load_vector_element %color, 2u
        %192:f32 = convert %x_189
        %193:f32 = add %x_192, %192
        store_vector_element %color, 2u, %193
        exit_if  # if_12
      }
    }
    %194:ptr<private, i32, read_write> = access %obj, 0u, 8i
    %x_196:i32 = load %194
    %x_199:f32 = load_vector_element %color, 2u
    %197:f32 = convert %x_196
    %198:f32 = add %x_199, %197
    store_vector_element %color, 2u, %198
    %x_203:f32 = load_vector_element %uv, 0u
    %x_205:f32 = load_vector_element %uv, 1u
    %201:f32 = sub %x_203, %x_205
    %202:f32 = abs %201
    %203:bool = lt %202, 0.25f
    if %203 [t: %b27] {  # if_13
      %b27 = block {  # true
        %204:ptr<private, i32, read_write> = access %obj, 0u, 9i
        %x_212:i32 = load %204
        %x_215:f32 = load_vector_element %color, 0u
        %207:f32 = convert %x_212
        %208:f32 = add %x_215, %207
        store_vector_element %color, 0u, %208
        exit_if  # if_13
      }
    }
    %x_218:vec3<f32> = load %color
    %x_219:vec3<f32> = normalize %x_218
    %211:f32 = access %x_219, 0u
    %212:f32 = access %x_219, 1u
    %213:f32 = access %x_219, 2u
    %214:vec4<f32> = construct %211, %212, %213, 1.0f
    store %x_GLF_color, %214
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out -> %b28 {
  %b28 = block {
    store %gl_FragCoord, %gl_FragCoord_param
    %217:void = call %main_1
    %218:vec4<f32> = load %x_GLF_color
    %219:main_out = construct %218
    ret %219
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
