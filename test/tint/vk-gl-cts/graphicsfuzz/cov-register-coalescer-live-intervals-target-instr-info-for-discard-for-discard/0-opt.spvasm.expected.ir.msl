SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 3> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr_1, 2> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_v1_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %x_7:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_9:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_v1:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void -> %b2 {
  %b2 = block {
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %8:ptr<uniform, i32, read> = access %x_7, 0u, 1i, 0u
    %9:i32 = load %8
    store %i, %9
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        %10:i32 = load %i
        %11:ptr<uniform, i32, read> = access %x_7, 0u, 0i, 0u
        %12:i32 = load %11
        %13:bool = lt %10, %12
        if %13 [t: %b5, f: %b6] {  # if_1
          %b5 = block {  # true
            exit_if  # if_1
          }
          %b6 = block {  # false
            exit_loop  # loop_1
          }
        }
        %14:ptr<uniform, f32, read> = access %x_9, 0u, 0i, 0u
        %15:f32 = load %14
        %16:ptr<uniform, f32, read> = access %x_9, 0u, 1i, 0u
        %17:f32 = load %16
        %18:bool = gt %15, %17
        if %18 [t: %b7] {  # if_2
          %b7 = block {  # true
            discard
            exit_if  # if_2
          }
        }
        %19:ptr<uniform, i32, read> = access %x_7, 0u, 1i, 0u
        %20:i32 = load %19
        store %j, %20
        loop [b: %b8, c: %b9] {  # loop_2
          %b8 = block {  # body
            %21:i32 = load %j
            %22:ptr<uniform, i32, read> = access %x_7, 0u, 0i, 0u
            %23:i32 = load %22
            %24:bool = lt %21, %23
            if %24 [t: %b10, f: %b11] {  # if_3
              %b10 = block {  # true
                exit_if  # if_3
              }
              %b11 = block {  # false
                exit_loop  # loop_2
              }
            }
            %25:f32 = load_vector_element %gl_FragCoord, 0u
            %26:ptr<uniform, f32, read> = access %x_9, 0u, 0i, 0u
            %27:f32 = load %26
            %28:bool = lt %25, %27
            if %28 [t: %b12] {  # if_4
              %b12 = block {  # true
                discard
                exit_if  # if_4
              }
            }
            %29:ptr<uniform, i32, read> = access %x_7, 0u, 2i, 0u
            %30:i32 = load %29
            %31:f32 = convert %30
            %32:ptr<uniform, i32, read> = access %x_7, 0u, 1i, 0u
            %33:i32 = load %32
            %34:f32 = convert %33
            %35:ptr<uniform, i32, read> = access %x_7, 0u, 1i, 0u
            %36:i32 = load %35
            %37:f32 = convert %36
            %38:ptr<uniform, i32, read> = access %x_7, 0u, 2i, 0u
            %39:i32 = load %38
            %40:f32 = convert %39
            %41:vec4<f32> = construct %31, %34, %37, %40
            store %x_GLF_v1, %41
            continue %b9
          }
          %b9 = block {  # continuing
            %42:i32 = load %j
            %43:i32 = add %42, 1i
            store %j, %43
            next_iteration %b8
          }
        }
        continue %b4
      }
      %b4 = block {  # continuing
        %44:i32 = load %i
        %45:i32 = add %44, 1i
        store %i, %45
        next_iteration %b3
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out -> %b13 {
  %b13 = block {
    store %gl_FragCoord, %gl_FragCoord_param
    %48:void = call %main_1
    %49:vec4<f32> = load %x_GLF_v1
    %50:main_out = construct %49
    ret %50
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
