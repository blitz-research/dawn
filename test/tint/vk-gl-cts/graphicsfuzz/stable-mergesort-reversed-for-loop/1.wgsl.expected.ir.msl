SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: buf0 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %data:ptr<private, array<i32, 10>, read_write> = var
  %temp:ptr<private, array<i32, 10>, read_write> = var
  %x_28:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%merge_i1_i1_i1_ = func(%f:ptr<function, i32, read_write>, %mid:ptr<function, i32, read_write>, %to:ptr<function, i32, read_write>):void -> %b2 {
  %b2 = block {
    %k:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %x_262:i32 = load %f
    store %k, %x_262
    %x_263:i32 = load %f
    store %i, %x_263
    %x_264:i32 = load %mid
    %17:i32 = add %x_264, 1i
    store %j, %17
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        %x_270:i32 = load %i
        %x_271:i32 = load %mid
        %x_273:i32 = load %j
        %x_274:i32 = load %to
        %22:bool = lte %x_270, %x_271
        %23:bool = lte %x_273, %x_274
        %24:bool = and %22, %23
        if %24 [t: %b5, f: %b6] {  # if_1
          %b5 = block {  # true
            exit_if  # if_1
          }
          %b6 = block {  # false
            exit_loop  # loop_1
          }
        }
        %x_278:i32 = load %i
        %26:ptr<private, i32, read_write> = access %data, %x_278
        %x_280:i32 = load %26
        %x_281:i32 = load %j
        %29:ptr<private, i32, read_write> = access %data, %x_281
        %x_283:i32 = load %29
        %31:bool = lt %x_280, %x_283
        if %31 [t: %b7, f: %b8] {  # if_2
          %b7 = block {  # true
            %x_288:i32 = load %k
            %33:i32 = add %x_288, 1i
            store %k, %33
            %x_290:i32 = load %i
            %35:i32 = add %x_290, 1i
            store %i, %35
            %36:ptr<private, i32, read_write> = access %data, %x_290
            %x_293:i32 = load %36
            %38:ptr<private, i32, read_write> = access %temp, %x_288
            store %38, %x_293
            exit_if  # if_2
          }
          %b8 = block {  # false
            %x_295:i32 = load %k
            %40:i32 = add %x_295, 1i
            store %k, %40
            %x_297:i32 = load %j
            %42:i32 = add %x_297, 1i
            store %j, %42
            %43:ptr<private, i32, read_write> = access %data, %x_297
            %x_300:i32 = load %43
            %45:ptr<private, i32, read_write> = access %temp, %x_295
            store %45, %x_300
            exit_if  # if_2
          }
        }
        continue %b4
      }
      %b4 = block {  # continuing
        next_iteration %b3
      }
    }
    loop [b: %b9, c: %b10] {  # loop_2
      %b9 = block {  # body
        %x_306:i32 = load %i
        %x_308:i32 = load %i
        %x_309:i32 = load %mid
        %49:bool = lt %x_306, 10i
        %50:bool = lte %x_308, %x_309
        %51:bool = and %49, %50
        if %51 [t: %b11, f: %b12] {  # if_3
          %b11 = block {  # true
            exit_if  # if_3
          }
          %b12 = block {  # false
            exit_loop  # loop_2
          }
        }
        %x_313:i32 = load %k
        %53:i32 = add %x_313, 1i
        store %k, %53
        %x_315:i32 = load %i
        %55:i32 = add %x_315, 1i
        store %i, %55
        %56:ptr<private, i32, read_write> = access %data, %x_315
        %x_318:i32 = load %56
        %58:ptr<private, i32, read_write> = access %temp, %x_313
        store %58, %x_318
        continue %b10
      }
      %b10 = block {  # continuing
        next_iteration %b9
      }
    }
    %x_320:i32 = load %f
    store %i_1, %x_320
    loop [b: %b13, c: %b14] {  # loop_3
      %b13 = block {  # body
        %x_325:i32 = load %i_1
        %x_326:i32 = load %to
        %62:bool = lte %x_325, %x_326
        if %62 [t: %b15, f: %b16] {  # if_4
          %b15 = block {  # true
            exit_if  # if_4
          }
          %b16 = block {  # false
            exit_loop  # loop_3
          }
        }
        %x_329:i32 = load %i_1
        %x_330:i32 = load %i_1
        %65:ptr<private, i32, read_write> = access %temp, %x_330
        %x_332:i32 = load %65
        %67:ptr<private, i32, read_write> = access %data, %x_329
        store %67, %x_332
        continue %b14
      }
      %b14 = block {  # continuing
        %x_334:i32 = load %i_1
        %69:i32 = add %x_334, 1i
        store %i_1, %69
        next_iteration %b13
      }
    }
    ret
  }
}
%mergeSort_ = func():void -> %b17 {
  %b17 = block {
    %low:ptr<function, i32, read_write> = var
    %high:ptr<function, i32, read_write> = var
    %m:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %f_1:ptr<function, i32, read_write> = var
    %mid_1:ptr<function, i32, read_write> = var
    %to_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    store %low, 0i
    store %high, 9i
    store %m, 1i
    loop [b: %b18, c: %b19] {  # loop_4
      %b18 = block {  # body
        %x_341:i32 = load %m
        %x_342:i32 = load %high
        %83:bool = lte %x_341, %x_342
        if %83 [t: %b20, f: %b21] {  # if_5
          %b20 = block {  # true
            exit_if  # if_5
          }
          %b21 = block {  # false
            exit_loop  # loop_4
          }
        }
        %x_345:i32 = load %low
        store %i_2, %x_345
        loop [b: %b22, c: %b23] {  # loop_5
          %b22 = block {  # body
            %x_350:i32 = load %i_2
            %x_351:i32 = load %high
            %87:bool = lt %x_350, %x_351
            if %87 [t: %b24, f: %b25] {  # if_6
              %b24 = block {  # true
                exit_if  # if_6
              }
              %b25 = block {  # false
                exit_loop  # loop_5
              }
            }
            %x_354:i32 = load %i_2
            store %f_1, %x_354
            %x_355:i32 = load %i_2
            %x_356:i32 = load %m
            %91:i32 = add %x_355, %x_356
            %92:i32 = sub %91, 1i
            store %mid_1, %92
            %x_359:i32 = load %i_2
            %x_360:i32 = load %m
            %x_364:i32 = load %high
            %96:i32 = mul 2i, %x_360
            %97:i32 = add %x_359, %96
            %98:i32 = sub %97, 1i
            %99:i32 = min %98, %x_364
            store %to_1, %99
            %x_366:i32 = load %f_1
            store %param, %x_366
            %x_367:i32 = load %mid_1
            store %param_1, %x_367
            %x_368:i32 = load %to_1
            store %param_2, %x_368
            %103:void = call %merge_i1_i1_i1_, %param, %param_1, %param_2
            continue %b23
          }
          %b23 = block {  # continuing
            %x_370:i32 = load %m
            %x_372:i32 = load %i_2
            %106:i32 = mul 2i, %x_370
            %107:i32 = add %x_372, %106
            store %i_2, %107
            next_iteration %b22
          }
        }
        continue %b19
      }
      %b19 = block {  # continuing
        %x_374:i32 = load %m
        %109:i32 = mul 2i, %x_374
        store %m, %109
        next_iteration %b18
      }
    }
    ret
  }
}
%main_1 = func():void -> %b26 {
  %b26 = block {
    %i_3:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %grey:ptr<function, f32, read_write> = var
    %int_i:ptr<function, i32, read_write> = var
    %115:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
    %x_85:f32 = load_vector_element %115, 0u
    %117:i32 = convert %x_85
    store %i_3, %117
    loop [b: %b27, c: %b28] {  # loop_6
      %b27 = block {  # body
        %x_91:i32 = load %i_3
        switch %x_91 [c: (9i, %b29), c: (8i, %b30), c: (7i, %b31), c: (6i, %b32), c: (5i, %b33), c: (4i, %b34), c: (3i, %b35), c: (2i, %b36), c: (1i, %b37), c: (0i, %b38), c: (default, %b39)] {  # switch_1
          %b29 = block {  # case
            %x_121:i32 = load %i_3
            %120:ptr<private, i32, read_write> = access %data, %x_121
            store %120, -5i
            exit_switch  # switch_1
          }
          %b30 = block {  # case
            %x_119:i32 = load %i_3
            %122:ptr<private, i32, read_write> = access %data, %x_119
            store %122, -4i
            exit_switch  # switch_1
          }
          %b31 = block {  # case
            %x_117:i32 = load %i_3
            %124:ptr<private, i32, read_write> = access %data, %x_117
            store %124, -3i
            exit_switch  # switch_1
          }
          %b32 = block {  # case
            %x_115:i32 = load %i_3
            %126:ptr<private, i32, read_write> = access %data, %x_115
            store %126, -2i
            exit_switch  # switch_1
          }
          %b33 = block {  # case
            %x_113:i32 = load %i_3
            %128:ptr<private, i32, read_write> = access %data, %x_113
            store %128, -1i
            exit_switch  # switch_1
          }
          %b34 = block {  # case
            %x_111:i32 = load %i_3
            %130:ptr<private, i32, read_write> = access %data, %x_111
            store %130, 0i
            exit_switch  # switch_1
          }
          %b35 = block {  # case
            %x_109:i32 = load %i_3
            %132:ptr<private, i32, read_write> = access %data, %x_109
            store %132, 1i
            exit_switch  # switch_1
          }
          %b36 = block {  # case
            %x_107:i32 = load %i_3
            %134:ptr<private, i32, read_write> = access %data, %x_107
            store %134, 2i
            exit_switch  # switch_1
          }
          %b37 = block {  # case
            %x_105:i32 = load %i_3
            %136:ptr<private, i32, read_write> = access %data, %x_105
            store %136, 3i
            exit_switch  # switch_1
          }
          %b38 = block {  # case
            %x_103:i32 = load %i_3
            %138:ptr<private, i32, read_write> = access %data, %x_103
            store %138, 4i
            exit_switch  # switch_1
          }
          %b39 = block {  # case
            exit_switch  # switch_1
          }
        }
        %x_123:i32 = load %i_3
        %140:i32 = add %x_123, 1i
        store %i_3, %140
        continue %b28
      }
      %b28 = block {  # continuing
        %x_125:i32 = load %i_3
        %142:bool = lt %x_125, 10i
        %143:bool = eq %142, false
        break_if %143 %b27
      }
    }
    store %j_1, 0i
    loop [b: %b40, c: %b41] {  # loop_7
      %b40 = block {  # body
        %x_131:i32 = load %j_1
        %145:bool = lt %x_131, 10i
        if %145 [t: %b42, f: %b43] {  # if_7
          %b42 = block {  # true
            exit_if  # if_7
          }
          %b43 = block {  # false
            exit_loop  # loop_7
          }
        }
        %x_134:i32 = load %j_1
        %x_135:i32 = load %j_1
        %148:ptr<private, i32, read_write> = access %data, %x_135
        %x_137:i32 = load %148
        %150:ptr<private, i32, read_write> = access %temp, %x_134
        store %150, %x_137
        continue %b41
      }
      %b41 = block {  # continuing
        %x_139:i32 = load %j_1
        %152:i32 = add %x_139, 1i
        store %j_1, %152
        next_iteration %b40
      }
    }
    %153:void = call %mergeSort_
    %x_143:f32 = load_vector_element %gl_FragCoord, 1u
    %155:i32 = convert %x_143
    %156:bool = lt %155, 30i
    if %156 [t: %b44, f: %b45] {  # if_8
      %b44 = block {  # true
        %157:ptr<private, i32, read_write> = access %data, 0i
        %x_150:i32 = load %157
        %159:f32 = convert %x_150
        %160:f32 = div %159, 10.0f
        %161:f32 = add 0.5f, %160
        store %grey, %161
        exit_if  # if_8
      }
      %b45 = block {  # false
        %x_155:f32 = load_vector_element %gl_FragCoord, 1u
        %163:i32 = convert %x_155
        %164:bool = lt %163, 60i
        if %164 [t: %b46, f: %b47] {  # if_9
          %b46 = block {  # true
            %165:ptr<private, i32, read_write> = access %data, 1i
            %x_162:i32 = load %165
            %167:f32 = convert %x_162
            %168:f32 = div %167, 10.0f
            %169:f32 = add 0.5f, %168
            store %grey, %169
            exit_if  # if_9
          }
          %b47 = block {  # false
            %x_167:f32 = load_vector_element %gl_FragCoord, 1u
            %171:i32 = convert %x_167
            %172:bool = lt %171, 90i
            if %172 [t: %b48, f: %b49] {  # if_10
              %b48 = block {  # true
                %173:ptr<private, i32, read_write> = access %data, 2i
                %x_174:i32 = load %173
                %175:f32 = convert %x_174
                %176:f32 = div %175, 10.0f
                %177:f32 = add 0.5f, %176
                store %grey, %177
                exit_if  # if_10
              }
              %b49 = block {  # false
                %x_179:f32 = load_vector_element %gl_FragCoord, 1u
                %179:i32 = convert %x_179
                %180:bool = lt %179, 120i
                if %180 [t: %b50, f: %b51] {  # if_11
                  %b50 = block {  # true
                    %181:ptr<private, i32, read_write> = access %data, 3i
                    %x_186:i32 = load %181
                    %183:f32 = convert %x_186
                    %184:f32 = div %183, 10.0f
                    %185:f32 = add 0.5f, %184
                    store %grey, %185
                    exit_if  # if_11
                  }
                  %b51 = block {  # false
                    %x_191:f32 = load_vector_element %gl_FragCoord, 1u
                    %187:i32 = convert %x_191
                    %188:bool = lt %187, 150i
                    if %188 [t: %b52, f: %b53] {  # if_12
                      %b52 = block {  # true
                        store %int_i, 1i
                        loop [b: %b54, c: %b55] {  # loop_8
                          %b54 = block {  # body
                            %x_201:i32 = load %int_i
                            %190:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
                            %x_203:f32 = load_vector_element %190, 0u
                            %192:i32 = convert %x_203
                            %193:bool = gt %x_201, %192
                            if %193 [t: %b56, f: %b57] {  # if_13
                              %b56 = block {  # true
                                exit_if  # if_13
                              }
                              %b57 = block {  # false
                                exit_loop  # loop_8
                              }
                            }
                            discard
                            continue %b55
                          }
                          %b55 = block {  # continuing
                            next_iteration %b54
                          }
                        }
                        exit_if  # if_12
                      }
                      %b53 = block {  # false
                        %x_208:f32 = load_vector_element %gl_FragCoord, 1u
                        %195:i32 = convert %x_208
                        %196:bool = lt %195, 180i
                        if %196 [t: %b58, f: %b59] {  # if_14
                          %b58 = block {  # true
                            %197:ptr<private, i32, read_write> = access %data, 5i
                            %x_215:i32 = load %197
                            %199:f32 = convert %x_215
                            %200:f32 = div %199, 10.0f
                            %201:f32 = add 0.5f, %200
                            store %grey, %201
                            exit_if  # if_14
                          }
                          %b59 = block {  # false
                            %x_220:f32 = load_vector_element %gl_FragCoord, 1u
                            %203:i32 = convert %x_220
                            %204:bool = lt %203, 210i
                            if %204 [t: %b60, f: %b61] {  # if_15
                              %b60 = block {  # true
                                %205:ptr<private, i32, read_write> = access %data, 6i
                                %x_227:i32 = load %205
                                %207:f32 = convert %x_227
                                %208:f32 = div %207, 10.0f
                                %209:f32 = add 0.5f, %208
                                store %grey, %209
                                exit_if  # if_15
                              }
                              %b61 = block {  # false
                                %x_232:f32 = load_vector_element %gl_FragCoord, 1u
                                %211:i32 = convert %x_232
                                %212:bool = lt %211, 240i
                                if %212 [t: %b62, f: %b63] {  # if_16
                                  %b62 = block {  # true
                                    %213:ptr<private, i32, read_write> = access %data, 7i
                                    %x_239:i32 = load %213
                                    %215:f32 = convert %x_239
                                    %216:f32 = div %215, 10.0f
                                    %217:f32 = add 0.5f, %216
                                    store %grey, %217
                                    exit_if  # if_16
                                  }
                                  %b63 = block {  # false
                                    %x_244:f32 = load_vector_element %gl_FragCoord, 1u
                                    %219:i32 = convert %x_244
                                    %220:bool = lt %219, 270i
                                    if %220 [t: %b64, f: %b65] {  # if_17
                                      %b64 = block {  # true
                                        %221:ptr<private, i32, read_write> = access %data, 8i
                                        %x_251:i32 = load %221
                                        %223:f32 = convert %x_251
                                        %224:f32 = div %223, 10.0f
                                        %225:f32 = add 0.5f, %224
                                        store %grey, %225
                                        exit_if  # if_17
                                      }
                                      %b65 = block {  # false
                                        discard
                                        exit_if  # if_17
                                      }
                                    }
                                    exit_if  # if_16
                                  }
                                }
                                exit_if  # if_15
                              }
                            }
                            exit_if  # if_14
                          }
                        }
                        exit_if  # if_12
                      }
                    }
                    exit_if  # if_11
                  }
                }
                exit_if  # if_10
              }
            }
            exit_if  # if_9
          }
        }
        exit_if  # if_8
      }
    }
    %x_255:f32 = load %grey
    %x_256:vec3<f32> = construct %x_255, %x_255, %x_255
    %228:f32 = access %x_256, 0u
    %229:f32 = access %x_256, 1u
    %230:f32 = access %x_256, 2u
    %231:vec4<f32> = construct %228, %229, %230, 1.0f
    store %x_GLF_color, %231
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out -> %b66 {
  %b66 = block {
    store %gl_FragCoord, %gl_FragCoord_param
    %234:void = call %main_1
    %235:vec4<f32> = load %x_GLF_color
    %236:main_out = construct %235
    ret %236
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
