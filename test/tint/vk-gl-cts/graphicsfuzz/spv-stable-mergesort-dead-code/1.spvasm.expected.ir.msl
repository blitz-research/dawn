SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: buf0 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %data:ptr<private, array<i32, 10>, read_write> = var
  %temp:ptr<private, array<i32, 10>, read_write> = var
  %x_28:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%merge_i1_i1_i1_ = func(%f:ptr<function, i32, read_write>, %mid:ptr<function, i32, read_write>, %to:ptr<function, i32, read_write>):void -> %b2 {
  %b2 = block {
    %k:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %14:i32 = load %f
    store %k, %14
    %15:i32 = load %f
    store %i, %15
    %16:i32 = load %mid
    %17:i32 = add %16, 1i
    store %j, %17
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        %18:i32 = load %i
        %19:i32 = load %mid
        %20:bool = lte %18, %19
        %21:i32 = load %j
        %22:i32 = load %to
        %23:bool = lte %21, %22
        %24:bool = and %20, %23
        if %24 [t: %b5, f: %b6] {  # if_1
          %b5 = block {  # true
            exit_if  # if_1
          }
          %b6 = block {  # false
            exit_loop  # loop_1
          }
        }
        %25:i32 = load %i
        %26:ptr<private, i32, read_write> = access %data, %25
        %27:i32 = load %26
        %28:i32 = load %j
        %29:ptr<private, i32, read_write> = access %data, %28
        %30:i32 = load %29
        %31:bool = lt %27, %30
        if %31 [t: %b7, f: %b8] {  # if_2
          %b7 = block {  # true
            %x_288:i32 = load %k
            %33:i32 = load %k
            %34:i32 = add %33, 1i
            store %k, %34
            %x_290:i32 = load %i
            %36:i32 = load %i
            %37:i32 = add %36, 1i
            store %i, %37
            %38:ptr<private, i32, read_write> = access %temp, %x_288
            %39:ptr<private, i32, read_write> = access %data, %x_290
            %40:i32 = load %39
            store %38, %40
            exit_if  # if_2
          }
          %b8 = block {  # false
            %x_295:i32 = load %k
            %42:i32 = load %k
            %43:i32 = add %42, 1i
            store %k, %43
            %x_297:i32 = load %j
            %45:i32 = load %j
            %46:i32 = add %45, 1i
            store %j, %46
            %47:ptr<private, i32, read_write> = access %temp, %x_295
            %48:ptr<private, i32, read_write> = access %data, %x_297
            %49:i32 = load %48
            store %47, %49
            exit_if  # if_2
          }
        }
        continue %b4
      }
      %b4 = block {  # continuing
        next_iteration %b3
      }
    }
    loop [b: %b9, c: %b10] {  # loop_2
      %b9 = block {  # body
        %50:i32 = load %i
        %51:bool = lt %50, 10i
        %52:i32 = load %i
        %53:i32 = load %mid
        %54:bool = lte %52, %53
        %55:bool = and %51, %54
        if %55 [t: %b11, f: %b12] {  # if_3
          %b11 = block {  # true
            exit_if  # if_3
          }
          %b12 = block {  # false
            exit_loop  # loop_2
          }
        }
        %x_313:i32 = load %k
        %57:i32 = load %k
        %58:i32 = add %57, 1i
        store %k, %58
        %x_315:i32 = load %i
        %60:i32 = load %i
        %61:i32 = add %60, 1i
        store %i, %61
        %62:ptr<private, i32, read_write> = access %temp, %x_313
        %63:ptr<private, i32, read_write> = access %data, %x_315
        %64:i32 = load %63
        store %62, %64
        continue %b10
      }
      %b10 = block {  # continuing
        next_iteration %b9
      }
    }
    %65:i32 = load %f
    store %i_1, %65
    loop [b: %b13, c: %b14] {  # loop_3
      %b13 = block {  # body
        %66:i32 = load %i_1
        %67:i32 = load %to
        %68:bool = lte %66, %67
        if %68 [t: %b15, f: %b16] {  # if_4
          %b15 = block {  # true
            exit_if  # if_4
          }
          %b16 = block {  # false
            exit_loop  # loop_3
          }
        }
        %x_329:i32 = load %i_1
        %70:ptr<private, i32, read_write> = access %data, %x_329
        %71:i32 = load %i_1
        %72:ptr<private, i32, read_write> = access %temp, %71
        %73:i32 = load %72
        store %70, %73
        continue %b14
      }
      %b14 = block {  # continuing
        %74:i32 = load %i_1
        %75:i32 = add %74, 1i
        store %i_1, %75
        next_iteration %b13
      }
    }
    ret
  }
}
%mergeSort_ = func():void -> %b17 {
  %b17 = block {
    %low:ptr<function, i32, read_write> = var
    %high:ptr<function, i32, read_write> = var
    %m:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %f_1:ptr<function, i32, read_write> = var
    %mid_1:ptr<function, i32, read_write> = var
    %to_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    store %low, 0i
    store %high, 9i
    store %m, 1i
    loop [b: %b18, c: %b19] {  # loop_4
      %b18 = block {  # body
        %87:i32 = load %m
        %88:i32 = load %high
        %89:bool = lte %87, %88
        if %89 [t: %b20, f: %b21] {  # if_5
          %b20 = block {  # true
            exit_if  # if_5
          }
          %b21 = block {  # false
            exit_loop  # loop_4
          }
        }
        %90:i32 = load %low
        store %i_2, %90
        loop [b: %b22, c: %b23] {  # loop_5
          %b22 = block {  # body
            %91:i32 = load %i_2
            %92:i32 = load %high
            %93:bool = lt %91, %92
            if %93 [t: %b24, f: %b25] {  # if_6
              %b24 = block {  # true
                exit_if  # if_6
              }
              %b25 = block {  # false
                exit_loop  # loop_5
              }
            }
            %94:i32 = load %i_2
            store %f_1, %94
            %95:i32 = load %i_2
            %96:i32 = load %m
            %97:i32 = add %95, %96
            %98:i32 = sub %97, 1i
            store %mid_1, %98
            %99:i32 = load %i_2
            %100:i32 = load %m
            %101:i32 = mul 2i, %100
            %102:i32 = add %99, %101
            %103:i32 = sub %102, 1i
            %104:i32 = load %high
            %105:i32 = min %103, %104
            store %to_1, %105
            %106:i32 = load %f_1
            store %param, %106
            %107:i32 = load %mid_1
            store %param_1, %107
            %108:i32 = load %to_1
            store %param_2, %108
            %109:void = call %merge_i1_i1_i1_, %param, %param_1, %param_2
            continue %b23
          }
          %b23 = block {  # continuing
            %110:i32 = load %i_2
            %111:i32 = load %m
            %112:i32 = mul 2i, %111
            %113:i32 = add %110, %112
            store %i_2, %113
            next_iteration %b22
          }
        }
        continue %b19
      }
      %b19 = block {  # continuing
        %114:i32 = load %m
        %115:i32 = mul 2i, %114
        store %m, %115
        next_iteration %b18
      }
    }
    ret
  }
}
%main_1 = func():void -> %b26 {
  %b26 = block {
    %i_3:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %grey:ptr<function, f32, read_write> = var
    %120:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
    %121:f32 = load_vector_element %120, 0u
    %122:i32 = convert %121
    store %i_3, %122
    loop [b: %b27, c: %b28] {  # loop_6
      %b27 = block {  # body
        %x_92:i32 = load %i_3
        switch %x_92 [c: (9i, %b29), c: (8i, %b30), c: (7i, %b31), c: (6i, %b32), c: (5i, %b33), c: (4i, %b34), c: (3i, %b35), c: (2i, %b36), c: (1i, %b37), c: (0i, %b38), c: (default, %b39)] {  # switch_1
          %b29 = block {  # case
            %x_122:i32 = load %i_3
            %125:ptr<private, i32, read_write> = access %data, %x_122
            store %125, -5i
            exit_switch  # switch_1
          }
          %b30 = block {  # case
            %x_120:i32 = load %i_3
            %127:ptr<private, i32, read_write> = access %data, %x_120
            store %127, -4i
            exit_switch  # switch_1
          }
          %b31 = block {  # case
            %x_118:i32 = load %i_3
            %129:ptr<private, i32, read_write> = access %data, %x_118
            store %129, -3i
            exit_switch  # switch_1
          }
          %b32 = block {  # case
            %x_116:i32 = load %i_3
            %131:ptr<private, i32, read_write> = access %data, %x_116
            store %131, -2i
            exit_switch  # switch_1
          }
          %b33 = block {  # case
            %x_114:i32 = load %i_3
            %133:ptr<private, i32, read_write> = access %data, %x_114
            store %133, -1i
            exit_switch  # switch_1
          }
          %b34 = block {  # case
            %x_112:i32 = load %i_3
            %135:ptr<private, i32, read_write> = access %data, %x_112
            store %135, 0i
            exit_switch  # switch_1
          }
          %b35 = block {  # case
            %x_110:i32 = load %i_3
            %137:ptr<private, i32, read_write> = access %data, %x_110
            store %137, 1i
            exit_switch  # switch_1
          }
          %b36 = block {  # case
            %x_108:i32 = load %i_3
            %139:ptr<private, i32, read_write> = access %data, %x_108
            store %139, 2i
            exit_switch  # switch_1
          }
          %b37 = block {  # case
            %x_106:i32 = load %i_3
            %141:ptr<private, i32, read_write> = access %data, %x_106
            store %141, 3i
            exit_switch  # switch_1
          }
          %b38 = block {  # case
            %x_104:i32 = load %i_3
            %143:ptr<private, i32, read_write> = access %data, %x_104
            store %143, 4i
            exit_switch  # switch_1
          }
          %b39 = block {  # case
            exit_switch  # switch_1
          }
        }
        %144:i32 = load %i_3
        %145:i32 = add %144, 1i
        store %i_3, %145
        continue %b28
      }
      %b28 = block {  # continuing
        %x_126:i32 = load %i_3
        %147:bool = lt %x_126, 10i
        %148:bool = eq %147, false
        break_if %148 %b27
      }
    }
    store %j_1, 0i
    loop [b: %b40, c: %b41] {  # loop_7
      %b40 = block {  # body
        %149:i32 = load %j_1
        %x_133:bool = lt %149, 10i
        %151:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
        %152:f32 = load_vector_element %151, 0u
        %153:bool = lte %152, 1.0f
        %154:bool = eq %153, false
        if %154 [t: %b42] {  # if_7
          %b42 = block {  # true
            store %grey, 1.0f
            exit_if  # if_7
          }
        }
        if %x_133 [t: %b43, f: %b44] {  # if_8
          %b43 = block {  # true
            exit_if  # if_8
          }
          %b44 = block {  # false
            exit_loop  # loop_7
          }
        }
        %x_140:i32 = load %j_1
        %156:ptr<private, i32, read_write> = access %temp, %x_140
        %157:i32 = load %j_1
        %158:ptr<private, i32, read_write> = access %data, %157
        %159:i32 = load %158
        store %156, %159
        continue %b41
      }
      %b41 = block {  # continuing
        %160:i32 = load %j_1
        %161:i32 = add %160, 1i
        store %j_1, %161
        next_iteration %b40
      }
    }
    %162:void = call %mergeSort_
    %163:f32 = load_vector_element %gl_FragCoord, 1u
    %164:i32 = convert %163
    %165:bool = lt %164, 30i
    if %165 [t: %b45, f: %b46] {  # if_9
      %b45 = block {  # true
        %166:ptr<private, i32, read_write> = access %data, 0i
        %167:i32 = load %166
        %168:f32 = convert %167
        %169:f32 = div %168, 10.0f
        %170:f32 = add 0.5f, %169
        store %grey, %170
        exit_if  # if_9
      }
      %b46 = block {  # false
        %171:f32 = load_vector_element %gl_FragCoord, 1u
        %172:i32 = convert %171
        %173:bool = lt %172, 60i
        if %173 [t: %b47, f: %b48] {  # if_10
          %b47 = block {  # true
            %174:ptr<private, i32, read_write> = access %data, 1i
            %175:i32 = load %174
            %176:f32 = convert %175
            %177:f32 = div %176, 10.0f
            %178:f32 = add 0.5f, %177
            store %grey, %178
            exit_if  # if_10
          }
          %b48 = block {  # false
            %179:f32 = load_vector_element %gl_FragCoord, 1u
            %180:i32 = convert %179
            %181:bool = lt %180, 90i
            if %181 [t: %b49, f: %b50] {  # if_11
              %b49 = block {  # true
                %182:ptr<private, i32, read_write> = access %data, 2i
                %183:i32 = load %182
                %184:f32 = convert %183
                %185:f32 = div %184, 10.0f
                %186:f32 = add 0.5f, %185
                store %grey, %186
                exit_if  # if_11
              }
              %b50 = block {  # false
                %187:f32 = load_vector_element %gl_FragCoord, 1u
                %188:i32 = convert %187
                %189:bool = lt %188, 120i
                if %189 [t: %b51, f: %b52] {  # if_12
                  %b51 = block {  # true
                    %190:ptr<private, i32, read_write> = access %data, 3i
                    %191:i32 = load %190
                    %192:f32 = convert %191
                    %193:f32 = div %192, 10.0f
                    %194:f32 = add 0.5f, %193
                    store %grey, %194
                    exit_if  # if_12
                  }
                  %b52 = block {  # false
                    %195:f32 = load_vector_element %gl_FragCoord, 1u
                    %196:i32 = convert %195
                    %197:bool = lt %196, 150i
                    if %197 [t: %b53, f: %b54] {  # if_13
                      %b53 = block {  # true
                        discard
                        exit_if  # if_13
                      }
                      %b54 = block {  # false
                        %198:f32 = load_vector_element %gl_FragCoord, 1u
                        %199:i32 = convert %198
                        %200:bool = lt %199, 180i
                        if %200 [t: %b55, f: %b56] {  # if_14
                          %b55 = block {  # true
                            %201:ptr<private, i32, read_write> = access %data, 5i
                            %202:i32 = load %201
                            %203:f32 = convert %202
                            %204:f32 = div %203, 10.0f
                            %205:f32 = add 0.5f, %204
                            store %grey, %205
                            exit_if  # if_14
                          }
                          %b56 = block {  # false
                            %206:f32 = load_vector_element %gl_FragCoord, 1u
                            %207:i32 = convert %206
                            %208:bool = lt %207, 210i
                            if %208 [t: %b57, f: %b58] {  # if_15
                              %b57 = block {  # true
                                %209:ptr<private, i32, read_write> = access %data, 6i
                                %210:i32 = load %209
                                %211:f32 = convert %210
                                %212:f32 = div %211, 10.0f
                                %213:f32 = add 0.5f, %212
                                store %grey, %213
                                exit_if  # if_15
                              }
                              %b58 = block {  # false
                                %214:f32 = load_vector_element %gl_FragCoord, 1u
                                %215:i32 = convert %214
                                %216:bool = lt %215, 240i
                                if %216 [t: %b59, f: %b60] {  # if_16
                                  %b59 = block {  # true
                                    %217:ptr<private, i32, read_write> = access %data, 7i
                                    %218:i32 = load %217
                                    %219:f32 = convert %218
                                    %220:f32 = div %219, 10.0f
                                    %221:f32 = add 0.5f, %220
                                    store %grey, %221
                                    exit_if  # if_16
                                  }
                                  %b60 = block {  # false
                                    %x_240:f32 = load_vector_element %gl_FragCoord, 1u
                                    %guard233:ptr<function, bool, read_write> = var, true
                                    %224:i32 = convert %x_240
                                    %225:bool = lt %224, 270i
                                    if %225 [t: %b61, f: %b62] {  # if_17
                                      %b61 = block {  # true
                                        %226:ptr<private, i32, read_write> = access %data, 8i
                                        %227:i32 = load %226
                                        %228:f32 = convert %227
                                        %229:f32 = div %228, 10.0f
                                        %230:f32 = add 0.5f, %229
                                        store %grey, %230
                                        store %guard233, false
                                        exit_if  # if_17
                                      }
                                      %b62 = block {  # false
                                        %231:bool = load %guard233
                                        if %231 [t: %b63] {  # if_18
                                          %b63 = block {  # true
                                            %232:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
                                            %233:f32 = load_vector_element %232, 1u
                                            %234:bool = lt 0.0f, %233
                                            %235:bool = eq %234, false
                                            if %235 [t: %b64] {  # if_19
                                              %b64 = block {  # true
                                                store %guard233, false
                                                exit_if  # if_19
                                              }
                                            }
                                            %236:bool = load %guard233
                                            if %236 [t: %b65] {  # if_20
                                              %b65 = block {  # true
                                                discard
                                                exit_if  # if_20
                                              }
                                            }
                                            exit_if  # if_18
                                          }
                                        }
                                        exit_if  # if_17
                                      }
                                    }
                                    exit_if  # if_16
                                  }
                                }
                                exit_if  # if_15
                              }
                            }
                            exit_if  # if_14
                          }
                        }
                        exit_if  # if_13
                      }
                    }
                    exit_if  # if_12
                  }
                }
                exit_if  # if_11
              }
            }
            exit_if  # if_10
          }
        }
        exit_if  # if_9
      }
    }
    %237:f32 = load %grey
    %x_256:vec3<f32> = construct %237
    %239:f32 = access %x_256, 0u
    %240:f32 = access %x_256, 1u
    %241:f32 = access %x_256, 2u
    %242:vec4<f32> = construct %239, %240, %241, 1.0f
    store %x_GLF_color, %242
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out -> %b66 {
  %b66 = block {
    store %gl_FragCoord, %gl_FragCoord_param
    %245:void = call %main_1
    %246:vec4<f32> = load %x_GLF_color
    %247:main_out = construct %246
    ret %247
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
