SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: QuicksortObject = struct @align(4) {
  numbers:array<i32, 10> @offset(0)
}

buf1 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

buf0 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  frag_color_1:vec4<f32> @offset(0), @location(0)
  gl_Position:vec4<f32> @offset(16), @builtin(position)
}

%b1 = block {  # root
  %obj:ptr<private, QuicksortObject, read_write> = var
  %x_GLF_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_pos:ptr<private, vec4<f32>, read_write> = var
  %x_34:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_37:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %frag_color:ptr<private, vec4<f32>, read_write> = var
  %gl_Position:ptr<private, vec4<f32>, read_write> = var
}

%swap_i1_i1_ = func(%i:ptr<function, i32, read_write>, %j:ptr<function, i32, read_write>):void -> %b2 {
  %b2 = block {
    %temp:ptr<function, i32, read_write> = var
    %12:i32 = load %i
    %13:ptr<private, i32, read_write> = access %obj, 0u, %12
    %14:i32 = load %13
    store %temp, %14
    %x_260:i32 = load %i
    %16:ptr<private, i32, read_write> = access %obj, 0u, %x_260
    %17:i32 = load %j
    %18:ptr<private, i32, read_write> = access %obj, 0u, %17
    %19:i32 = load %18
    store %16, %19
    %x_265:i32 = load %j
    %21:ptr<private, i32, read_write> = access %obj, 0u, %x_265
    %22:i32 = load %temp
    store %21, %22
    ret
  }
}
%performPartition_i1_i1_ = func(%l:ptr<function, i32, read_write>, %h:ptr<function, i32, read_write>):i32 -> %b3 {
  %b3 = block {
    %pivot:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    %param_3:ptr<function, i32, read_write> = var
    %33:i32 = load %h
    %34:ptr<private, i32, read_write> = access %obj, 0u, %33
    %35:i32 = load %34
    store %pivot, %35
    %36:i32 = load %l
    %37:i32 = sub %36, 1i
    store %i_1, %37
    %38:i32 = load %l
    store %j_1, %38
    loop [b: %b4, c: %b5] {  # loop_1
      %b4 = block {  # body
        %39:i32 = load %j_1
        %40:i32 = load %h
        %41:i32 = sub %40, 1i
        %42:bool = lte %39, %41
        if %42 [t: %b6, f: %b7] {  # if_1
          %b6 = block {  # true
            exit_if  # if_1
          }
          %b7 = block {  # false
            exit_loop  # loop_1
          }
        }
        %43:i32 = load %j_1
        %44:ptr<private, i32, read_write> = access %obj, 0u, %43
        %45:i32 = load %44
        %46:i32 = load %pivot
        %47:bool = lte %45, %46
        if %47 [t: %b8] {  # if_2
          %b8 = block {  # true
            %48:i32 = load %i_1
            %49:i32 = add %48, 1i
            store %i_1, %49
            %50:i32 = load %i_1
            store %param, %50
            %51:i32 = load %j_1
            store %param_1, %51
            %52:void = call %swap_i1_i1_, %param, %param_1
            exit_if  # if_2
          }
        }
        continue %b5
      }
      %b5 = block {  # continuing
        %53:i32 = load %j_1
        %54:i32 = add %53, 1i
        store %j_1, %54
        next_iteration %b4
      }
    }
    %55:i32 = load %i_1
    %56:i32 = add %55, 1i
    store %param_2, %56
    %57:i32 = load %h
    store %param_3, %57
    %58:void = call %swap_i1_i1_, %param_2, %param_3
    %x_302:i32 = load %i_1
    %60:i32 = add %x_302, 1i
    ret %60
  }
}
%quicksort_ = func():void -> %b9 {
  %b9 = block {
    %l_1:ptr<function, i32, read_write> = var
    %h_1:ptr<function, i32, read_write> = var
    %top:ptr<function, i32, read_write> = var
    %stack:ptr<function, array<i32, 10>, read_write> = var
    %p:ptr<function, i32, read_write> = var
    %param_4:ptr<function, i32, read_write> = var
    %param_5:ptr<function, i32, read_write> = var
    store %l_1, 0i
    store %h_1, 9i
    store %top, -1i
    %69:i32 = load %top
    %x_306:i32 = add %69, 1i
    store %top, %x_306
    %71:ptr<function, i32, read_write> = access %stack, %x_306
    %72:i32 = load %l_1
    store %71, %72
    %73:i32 = load %top
    %x_310:i32 = add %73, 1i
    store %top, %x_310
    %75:ptr<function, i32, read_write> = access %stack, %x_310
    %76:i32 = load %h_1
    store %75, %76
    loop [b: %b10, c: %b11] {  # loop_2
      %b10 = block {  # body
        %77:i32 = load %top
        %78:bool = gte %77, 0i
        if %78 [t: %b12, f: %b13] {  # if_3
          %b12 = block {  # true
            exit_if  # if_3
          }
          %b13 = block {  # false
            exit_loop  # loop_2
          }
        }
        %x_320:i32 = load %top
        %80:i32 = load %top
        %81:i32 = sub %80, 1i
        store %top, %81
        %82:ptr<function, i32, read_write> = access %stack, %x_320
        %83:i32 = load %82
        store %h_1, %83
        %x_324:i32 = load %top
        %85:i32 = load %top
        %86:i32 = sub %85, 1i
        store %top, %86
        %87:ptr<function, i32, read_write> = access %stack, %x_324
        %88:i32 = load %87
        store %l_1, %88
        %89:i32 = load %l_1
        store %param_4, %89
        %90:i32 = load %h_1
        store %param_5, %90
        %x_330:i32 = call %performPartition_i1_i1_, %param_4, %param_5
        store %p, %x_330
        %92:i32 = load %p
        %93:i32 = sub %92, 1i
        %94:i32 = load %l_1
        %95:bool = gt %93, %94
        if %95 [t: %b14] {  # if_4
          %b14 = block {  # true
            %96:i32 = load %top
            %x_338:i32 = add %96, 1i
            store %top, %x_338
            %98:ptr<function, i32, read_write> = access %stack, %x_338
            %99:i32 = load %l_1
            store %98, %99
            %100:i32 = load %top
            %x_342:i32 = add %100, 1i
            store %top, %x_342
            %102:ptr<function, i32, read_write> = access %stack, %x_342
            %103:i32 = load %p
            %104:i32 = sub %103, 1i
            store %102, %104
            exit_if  # if_4
          }
        }
        %105:i32 = load %p
        %106:i32 = add %105, 1i
        %107:i32 = load %h_1
        %108:bool = lt %106, %107
        if %108 [t: %b15] {  # if_5
          %b15 = block {  # true
            %109:i32 = load %top
            %x_353:i32 = add %109, 1i
            store %top, %x_353
            %111:ptr<function, i32, read_write> = access %stack, %x_353
            %112:i32 = load %p
            %113:i32 = add %112, 1i
            store %111, %113
            %114:i32 = load %top
            %x_358:i32 = add %114, 1i
            store %top, %x_358
            %116:ptr<function, i32, read_write> = access %stack, %x_358
            %117:i32 = load %h_1
            store %116, %117
            exit_if  # if_5
          }
        }
        continue %b11
      }
      %b11 = block {  # continuing
        next_iteration %b10
      }
    }
    ret
  }
}
%main_1 = func():void -> %b16 {
  %b16 = block {
    %i_2:ptr<function, i32, read_write> = var
    %uv:ptr<function, vec2<f32>, read_write> = var
    %color:ptr<function, vec3<f32>, read_write> = var
    %122:vec4<f32> = load %x_GLF_pos
    %123:vec4<f32> = add %122, vec4<f32>(1.0f, 1.0f, 0.0f, 0.0f)
    %124:vec4<f32> = mul %123, vec4<f32>(128.0f, 128.0f, 1.0f, 1.0f)
    store %x_GLF_FragCoord, %124
    store %i_2, 0i
    loop [b: %b17, c: %b18] {  # loop_3
      %b17 = block {  # body
        %125:i32 = load %i_2
        %126:bool = lt %125, 10i
        if %126 [t: %b19, f: %b20] {  # if_6
          %b19 = block {  # true
            exit_if  # if_6
          }
          %b20 = block {  # false
            exit_loop  # loop_3
          }
        }
        %x_104:i32 = load %i_2
        %128:ptr<private, i32, read_write> = access %obj, 0u, %x_104
        %129:i32 = load %i_2
        %130:i32 = sub 10i, %129
        store %128, %130
        %x_108:i32 = load %i_2
        %132:ptr<private, i32, read_write> = access %obj, 0u, %x_108
        %133:i32 = load %i_2
        %134:ptr<private, i32, read_write> = access %obj, 0u, %133
        %135:i32 = load %134
        %136:i32 = load %i_2
        %137:ptr<private, i32, read_write> = access %obj, 0u, %136
        %138:i32 = load %137
        %139:i32 = mul %135, %138
        store %132, %139
        continue %b18
      }
      %b18 = block {  # continuing
        %140:i32 = load %i_2
        %141:i32 = add %140, 1i
        store %i_2, %141
        next_iteration %b17
      }
    }
    %142:void = call %quicksort_
    %143:vec4<f32> = load %x_GLF_FragCoord
    %144:vec2<f32> = swizzle %143, xy
    %145:ptr<uniform, vec2<f32>, read> = access %x_34, 0u
    %146:vec2<f32> = load %145
    %147:vec2<f32> = div %144, %146
    store %uv, %147
    store %color, vec3<f32>(1.0f, 2.0f, 3.0f)
    %148:f32 = load_vector_element %color, 0u
    %149:ptr<private, i32, read_write> = access %obj, 0u, 0i
    %150:i32 = load %149
    %151:f32 = convert %150
    %152:f32 = add %148, %151
    store_vector_element %color, 0u, %152
    %153:f32 = load_vector_element %uv, 0u
    %154:bool = gt %153, 0.25f
    if %154 [t: %b21] {  # if_7
      %b21 = block {  # true
        %155:f32 = load_vector_element %color, 0u
        %156:ptr<private, i32, read_write> = access %obj, 0u, 1i
        %157:i32 = load %156
        %158:f32 = convert %157
        %159:f32 = add %155, %158
        store_vector_element %color, 0u, %159
        exit_if  # if_7
      }
    }
    %160:f32 = load_vector_element %uv, 0u
    %161:bool = gt %160, 0.5f
    if %161 [t: %b22] {  # if_8
      %b22 = block {  # true
        %162:f32 = load_vector_element %color, 1u
        %163:ptr<uniform, vec2<f32>, read> = access %x_37, 0u
        %164:f32 = load_vector_element %163, 1u
        %165:i32 = convert %164
        %166:i32 = mul 2i, %165
        %167:i32 = max %166, 2i
        %168:ptr<private, i32, read_write> = access %obj, 0u, %167
        %169:i32 = load %168
        %170:f32 = convert %169
        %171:ptr<uniform, vec2<f32>, read> = access %x_37, 0u
        %172:f32 = load_vector_element %171, 1u
        %173:i32 = convert %172
        %174:i32 = mul 2i, %173
        %175:i32 = max %174, 2i
        %176:ptr<private, i32, read_write> = access %obj, 0u, %175
        %177:i32 = load %176
        %178:f32 = convert %177
        %179:f32 = max %170, %178
        %180:f32 = add %162, %179
        store_vector_element %color, 1u, %180
        exit_if  # if_8
      }
    }
    %181:f32 = load_vector_element %uv, 0u
    %182:bool = gt %181, 0.75f
    if %182 [t: %b23] {  # if_9
      %b23 = block {  # true
        %183:f32 = load_vector_element %color, 2u
        %184:ptr<private, i32, read_write> = access %obj, 0u, 3i
        %185:i32 = load %184
        %186:f32 = convert %185
        %187:f32 = add %183, %186
        store_vector_element %color, 2u, %187
        exit_if  # if_9
      }
    }
    %188:f32 = load_vector_element %color, 1u
    %189:ptr<private, i32, read_write> = access %obj, 0u, 4i
    %190:i32 = load %189
    %191:f32 = convert %190
    %192:f32 = add %188, %191
    store_vector_element %color, 1u, %192
    %193:f32 = load_vector_element %uv, 1u
    %194:bool = gt %193, 0.25f
    if %194 [t: %b24] {  # if_10
      %b24 = block {  # true
        %195:f32 = load_vector_element %color, 0u
        %196:ptr<private, i32, read_write> = access %obj, 0u, 5i
        %197:i32 = load %196
        %198:f32 = convert %197
        %199:f32 = add %195, %198
        store_vector_element %color, 0u, %199
        exit_if  # if_10
      }
    }
    %200:f32 = load_vector_element %uv, 1u
    %201:bool = gt %200, 0.5f
    if %201 [t: %b25] {  # if_11
      %b25 = block {  # true
        %202:f32 = load_vector_element %color, 1u
        %203:ptr<private, i32, read_write> = access %obj, 0u, 6i
        %204:i32 = load %203
        %205:f32 = convert %204
        %206:f32 = add %202, %205
        store_vector_element %color, 1u, %206
        exit_if  # if_11
      }
    }
    %207:f32 = load_vector_element %uv, 1u
    %208:bool = gt %207, 0.75f
    if %208 [t: %b26] {  # if_12
      %b26 = block {  # true
        %209:f32 = load_vector_element %color, 2u
        %210:ptr<private, i32, read_write> = access %obj, 0u, 7i
        %211:i32 = load %210
        %212:f32 = convert %211
        %213:f32 = add %209, %212
        store_vector_element %color, 2u, %213
        exit_if  # if_12
      }
    }
    %214:f32 = load_vector_element %color, 2u
    %215:ptr<private, i32, read_write> = access %obj, 0u, 8i
    %216:i32 = load %215
    %217:f32 = convert %216
    %218:f32 = add %214, %217
    store_vector_element %color, 2u, %218
    %219:f32 = load_vector_element %uv, 0u
    %220:f32 = load_vector_element %uv, 1u
    %221:f32 = sub %219, %220
    %222:f32 = abs %221
    %223:bool = lt %222, 0.25f
    if %223 [t: %b27] {  # if_13
      %b27 = block {  # true
        %224:f32 = load_vector_element %color, 0u
        %225:ptr<private, i32, read_write> = access %obj, 0u, 9i
        %226:i32 = load %225
        %227:f32 = convert %226
        %228:f32 = add %224, %227
        store_vector_element %color, 0u, %228
        exit_if  # if_13
      }
    }
    %229:vec3<f32> = load %color
    %x_249:vec3<f32> = normalize %229
    %231:f32 = access %x_249, 0u
    %232:f32 = access %x_249, 1u
    %233:f32 = access %x_249, 2u
    %234:vec4<f32> = construct %231, %232, %233, 1.0f
    store %frag_color, %234
    %235:vec4<f32> = load %x_GLF_pos
    store %gl_Position, %235
    ret
  }
}
%tint_symbol = @vertex func(%x_GLF_pos_param:vec4<f32> [@location(0)]):main_out -> %b28 {
  %b28 = block {
    store %x_GLF_pos, %x_GLF_pos_param
    %238:void = call %main_1
    %239:vec4<f32> = load %frag_color
    %240:vec4<f32> = load %gl_Position
    %241:main_out = construct %239, %240
    ret %241
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
