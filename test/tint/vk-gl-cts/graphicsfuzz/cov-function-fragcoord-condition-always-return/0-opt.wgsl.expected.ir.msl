SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 4> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:i32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr_1, 2> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_8:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %x_11:ptr<uniform, buf0, read> = var @binding_point(0, 0)
}

%func_f1_ = func(%x:ptr<function, f32, read_write>):f32 -> %b2 {
  %b2 = block {
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        if true [t: %b5, f: %b6] {  # if_1
          %b5 = block {  # true
            exit_if  # if_1
          }
          %b6 = block {  # false
            exit_loop  # loop_1
          }
        }
        loop [b: %b7, c: %b8] {  # loop_2
          %b7 = block {  # body
            %x_77:f32 = load_vector_element %gl_FragCoord, 1u
            %8:ptr<uniform, f32, read> = access %x_8, 0u, 2i, 0u
            %x_79:f32 = load %8
            %10:bool = lt %x_77, %x_79
            if %10 [t: %b9] {  # if_2
              %b9 = block {  # true
                loop [b: %b10, c: %b11] {  # loop_3
                  %b10 = block {  # body
                    continue %b11
                  }
                  %b11 = block {  # continuing
                    %x_88:f32 = load_vector_element %gl_FragCoord, 0u
                    %12:ptr<uniform, f32, read> = access %x_8, 0u, 2i, 0u
                    %x_90:f32 = load %12
                    %14:bool = lt %x_88, %x_90
                    %15:bool = eq %14, false
                    break_if %15 %b10
                  }
                }
                exit_if  # if_2
              }
            }
            %x_92:f32 = load %x
            %17:ptr<uniform, f32, read> = access %x_8, 0u, 3i, 0u
            %x_94:f32 = load %17
            %19:bool = lt %x_92, %x_94
            if %19 [t: %b12] {  # if_3
              %b12 = block {  # true
                %20:ptr<uniform, f32, read> = access %x_8, 0u, 1i, 0u
                %x_99:f32 = load %20
                ret %x_99
              }
            }
            continue %b8
          }
          %b8 = block {  # continuing
            %x_101:f32 = load_vector_element %gl_FragCoord, 1u
            %23:ptr<uniform, f32, read> = access %x_8, 0u, 2i, 0u
            %x_103:f32 = load %23
            %25:bool = lt %x_101, %x_103
            %26:bool = eq %25, false
            break_if %26 %b7
          }
        }
        continue %b4
      }
      %b4 = block {  # continuing
        next_iteration %b3
      }
    }
    %27:ptr<uniform, f32, read> = access %x_8, 0u, 0i, 0u
    %x_106:f32 = load %27
    ret %x_106
  }
}
%main_1 = func():void -> %b13 {
  %b13 = block {
    %param:ptr<function, f32, read_write> = var
    %x_41:f32 = load_vector_element %gl_FragCoord, 0u
    store %param, %x_41
    %x_42:f32 = call %func_f1_, %param
    %33:ptr<uniform, f32, read> = access %x_8, 0u, 1i, 0u
    %x_44:f32 = load %33
    %35:bool = eq %x_42, %x_44
    if %35 [t: %b14, f: %b15] {  # if_4
      %b14 = block {  # true
        %36:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
        %x_50:i32 = load %36
        %38:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
        %x_53:i32 = load %38
        %40:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
        %x_56:i32 = load %40
        %42:ptr<uniform, i32, read> = access %x_11, 0u, 0i, 0u
        %x_59:i32 = load %42
        %44:f32 = convert %x_50
        %45:f32 = convert %x_53
        %46:f32 = convert %x_56
        %47:f32 = convert %x_59
        %48:vec4<f32> = construct %44, %45, %46, %47
        store %x_GLF_color, %48
        exit_if  # if_4
      }
      %b15 = block {  # false
        %49:ptr<uniform, i32, read> = access %x_11, 0u, 1i, 0u
        %x_63:i32 = load %49
        %x_64:f32 = convert %x_63
        %52:vec4<f32> = construct %x_64, %x_64, %x_64, %x_64
        store %x_GLF_color, %52
        exit_if  # if_4
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out -> %b16 {
  %b16 = block {
    store %gl_FragCoord, %gl_FragCoord_param
    %55:void = call %main_1
    %56:vec4<f32> = load %x_GLF_color
    %57:main_out = construct %56
    ret %57
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
