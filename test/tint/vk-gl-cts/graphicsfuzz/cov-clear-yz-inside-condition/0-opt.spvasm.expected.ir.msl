SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: strided_arr = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr, 2> @offset(0)
}

buf1 = struct @align(4) {
  zero:f32 @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %x_6:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_9:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%main_1 = func():void -> %b2 {
  %b2 = block {
    %v0:ptr<function, vec2<f32>, read_write> = var
    %v1:ptr<function, vec4<f32>, read_write> = var
    %x_57:ptr<function, vec4<f32>, read_write> = var
    %8:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
    %9:f32 = load %8
    %10:vec2<f32> = construct %9
    store %v0, %10
    %11:f32 = load_vector_element %v0, 0u
    %x_36:vec4<f32> = construct %11
    store %v1, %x_36
    %13:ptr<uniform, f32, read> = access %x_9, 0u
    %14:f32 = load %13
    %15:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
    %16:f32 = load %15
    %17:bool = eq %14, %16
    %18:bool = eq %17, false
    if %18 [t: %b3, f: %b4] {  # if_1
      %b3 = block {  # true
        %19:ptr<uniform, f32, read> = access %x_9, 0u
        %20:f32 = load %19
        %21:ptr<uniform, f32, read> = access %x_6, 0u, 1i, 0u
        %22:f32 = load %21
        %23:bool = eq %20, %22
        if %23 [t: %b5] {  # if_2
          %b5 = block {  # true
            ret
          }
        }
        %24:f32 = access %x_36, 0u
        %25:vec2<f32> = swizzle %x_36, yz
        %26:ptr<uniform, f32, read> = access %x_6, 0u, 0i, 0u
        %27:f32 = load %26
        %28:vec2<f32> = construct %27
        %29:vec2<f32> = sub %25, %28
        %30:vec2<f32> = swizzle %29, xy
        %31:f32 = access %x_36, 3u
        %32:vec4<f32> = construct %24, %30, %31
        store %x_57, %32
        %33:vec4<f32> = load %x_57
        store %v1, %33
        exit_if  # if_1
      }
      %b4 = block {  # false
        discard
        exit_if  # if_1
      }
    }
    %34:vec4<f32> = load %x_57
    store %x_GLF_color, %34
    ret
  }
}
%tint_symbol = @fragment func():main_out -> %b6 {
  %b6 = block {
    %36:void = call %main_1
    %37:vec4<f32> = load %x_GLF_color
    %38:main_out = construct %37
    ret %38
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
