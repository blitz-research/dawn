SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: buf0 = struct @align(8) {
  injectionSwitch:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %data:ptr<private, array<i32, 10>, read_write> = var
  %temp:ptr<private, array<i32, 10>, read_write> = var
  %x_28:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%merge_i1_i1_i1_ = func(%f:ptr<function, i32, read_write>, %mid:ptr<function, i32, read_write>, %to:ptr<function, i32, read_write>):void -> %b2 {
  %b2 = block {
    %k:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %14:i32 = load %f
    store %k, %14
    %15:i32 = load %f
    store %i, %15
    %16:i32 = load %mid
    %17:i32 = add %16, 1i
    store %j, %17
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        %x_283:ptr<function, i32, read_write> = var
        %x_284:ptr<function, i32, read_write> = var
        %x_285:ptr<function, i32, read_write> = var
        %x_303:ptr<function, i32, read_write> = var
        %x_304:ptr<function, i32, read_write> = var
        %x_305:ptr<function, i32, read_write> = var
        %x_318:ptr<function, i32, read_write> = var
        %x_322:ptr<function, i32, read_write> = var
        %x_326:ptr<function, i32, read_write> = var
        %x_337:ptr<function, i32, read_write> = var
        %x_336:ptr<function, i32, read_write> = var
        %x_338:ptr<function, i32, read_write> = var
        %x_350:ptr<function, i32, read_write> = var
        %x_349:ptr<function, i32, read_write> = var
        %x_351:ptr<function, i32, read_write> = var
        %x_364:ptr<function, i32, read_write> = var
        %x_363:ptr<function, i32, read_write> = var
        %x_365:ptr<function, i32, read_write> = var
        if true [t: %b5, f: %b6] {  # if_1
          %b5 = block {  # true
            exit_if  # if_1
          }
          %b6 = block {  # false
            continue %b4
          }
        }
        %36:i32 = load %i
        %37:i32 = load %mid
        %38:bool = lte %36, %37
        %39:i32 = load %j
        %40:i32 = load %to
        %41:bool = lte %39, %40
        %42:bool = and %38, %41
        if %42 [t: %b7, f: %b8] {  # if_2
          %b7 = block {  # true
            exit_if  # if_2
          }
          %b8 = block {  # false
            exit_loop  # loop_1
          }
        }
        %43:i32 = load %i
        %44:ptr<private, i32, read_write> = access %data, %43
        %45:i32 = load %44
        %46:i32 = load %j
        %47:ptr<private, i32, read_write> = access %data, %46
        %48:i32 = load %47
        %x_278:bool = lt %45, %48
        if %x_278 [t: %b9, f: %b10] {  # if_3
          %b9 = block {  # true
            %50:i32 = load %k
            store %x_283, %50
            %51:i32 = load %x_283
            store %x_285, %51
            exit_if  # if_3
          }
          %b10 = block {  # false
            store %x_284, 0i
            %52:i32 = load %x_284
            store %x_285, %52
            exit_if  # if_3
          }
        }
        %53:i32 = load %x_285
        %x_286:i32 = add %53, 1i
        if %x_278 [t: %b11] {  # if_4
          %b11 = block {  # true
            store %k, %x_286
            %55:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
            %56:f32 = load_vector_element %55, 0u
            %57:bool = lte 1.0f, %56
            %58:bool = eq %57, false
            if %58 [t: %b12, f: %b13] {  # if_5
              %b12 = block {  # true
                exit_if  # if_5
              }
              %b13 = block {  # false
                continue %b4
              }
            }
            exit_if  # if_4
          }
        }
        %59:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
        %60:f32 = load_vector_element %59, 1u
        %61:bool = gte %60, 0.0f
        if %61 [t: %b14, f: %b15] {  # if_6
          %b14 = block {  # true
            exit_if  # if_6
          }
          %b15 = block {  # false
            continue %b4
          }
        }
        %x_298:i32 = let 0i
        if %x_278 [t: %b16, f: %b17] {  # if_7
          %b16 = block {  # true
            %63:i32 = load %i
            store %x_303, %63
            %64:i32 = load %x_303
            store %x_305, %64
            exit_if  # if_7
          }
          %b17 = block {  # false
            store %x_304, 0i
            %65:i32 = load %x_304
            store %x_305, %65
            exit_if  # if_7
          }
        }
        %66:i32 = load %x_305
        %x_307:i32 = select %x_298, %66, %x_278
        if %x_278 [t: %b18] {  # if_8
          %b18 = block {  # true
            %68:i32 = add %x_307, 1i
            store %i, %68
            exit_if  # if_8
          }
        }
        %x_313:i32 = let 0i
        if %x_278 [t: %b19, f: %b20] {  # if_9
          %b19 = block {  # true
            %70:ptr<private, i32, read_write> = access %data, %x_307
            %71:i32 = load %70
            store %x_318, %71
            %72:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
            %x_320:f32 = load_vector_element %72, 1u
            %74:i32 = load %x_318
            store %x_326, %74
            %75:bool = lte 0.0f, %x_320
            %76:bool = eq %75, false
            if %76 [t: %b21] {  # if_10
              %b21 = block {  # true
                continue %b4
              }
            }
            exit_if  # if_9
          }
          %b20 = block {  # false
            store %x_322, 0i
            %77:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
            %x_324:f32 = load_vector_element %77, 1u
            %79:i32 = load %x_322
            store %x_326, %79
            %80:bool = lt %x_324, 0.0f
            %81:bool = eq %80, false
            if %81 [t: %b22, f: %b23] {  # if_11
              %b22 = block {  # true
                exit_if  # if_11
              }
              %b23 = block {  # false
                continue %b4
              }
            }
            exit_if  # if_9
          }
        }
        if %x_278 [t: %b24] {  # if_12
          %b24 = block {  # true
            %82:i32 = load %x_285
            %83:ptr<private, i32, read_write> = access %temp, %82
            %84:i32 = load %x_326
            %85:i32 = select %x_313, %84, %x_278
            store %83, %85
            exit_if  # if_12
          }
        }
        if %x_278 [t: %b25, f: %b26] {  # if_13
          %b25 = block {  # true
            store %x_337, 0i
            %86:i32 = load %x_337
            store %x_338, %86
            exit_if  # if_13
          }
          %b26 = block {  # false
            %87:i32 = load %k
            store %x_336, %87
            %88:i32 = load %x_336
            store %x_338, %88
            exit_if  # if_13
          }
        }
        if %x_278 [t: %b27, f: %b28] {  # if_14
          %b27 = block {  # true
            exit_if  # if_14
          }
          %b28 = block {  # false
            %89:i32 = load %x_338
            %90:i32 = add %89, 1i
            store %k, %90
            exit_if  # if_14
          }
        }
        %91:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
        %92:f32 = load_vector_element %91, 0u
        %93:bool = lte 1.0f, %92
        %94:bool = eq %93, false
        if %94 [t: %b29, f: %b30] {  # if_15
          %b29 = block {  # true
            exit_if  # if_15
          }
          %b30 = block {  # false
            continue %b4
          }
        }
        if %x_278 [t: %b31, f: %b32] {  # if_16
          %b31 = block {  # true
            store %x_350, 0i
            %95:i32 = load %x_350
            store %x_351, %95
            exit_if  # if_16
          }
          %b32 = block {  # false
            %96:i32 = load %j
            store %x_349, %96
            %97:i32 = load %x_349
            store %x_351, %97
            exit_if  # if_16
          }
        }
        %98:i32 = load %x_351
        %x_355:i32 = select %98, 0i, %x_278
        if %x_278 [t: %b33, f: %b34] {  # if_17
          %b33 = block {  # true
            exit_if  # if_17
          }
          %b34 = block {  # false
            %100:i32 = add %x_355, 1i
            store %j, %100
            exit_if  # if_17
          }
        }
        if %x_278 [t: %b35, f: %b36] {  # if_18
          %b35 = block {  # true
            store %x_364, 0i
            %101:i32 = load %x_364
            store %x_365, %101
            exit_if  # if_18
          }
          %b36 = block {  # false
            %102:ptr<private, i32, read_write> = access %data, %x_355
            %103:i32 = load %102
            store %x_363, %103
            %104:i32 = load %x_363
            store %x_365, %104
            exit_if  # if_18
          }
        }
        if %x_278 [t: %b37, f: %b38] {  # if_19
          %b37 = block {  # true
            exit_if  # if_19
          }
          %b38 = block {  # false
            %105:i32 = load %x_338
            %106:ptr<private, i32, read_write> = access %temp, %105
            %107:i32 = load %x_365
            store %106, %107
            exit_if  # if_19
          }
        }
        continue %b4
      }
      %b4 = block {  # continuing
        next_iteration %b3
      }
    }
    loop [b: %b39, c: %b40] {  # loop_2
      %b39 = block {  # body
        %108:i32 = load %i
        %109:bool = lt %108, 10i
        %110:i32 = load %i
        %111:i32 = load %mid
        %112:bool = lte %110, %111
        %113:bool = and %109, %112
        if %113 [t: %b41, f: %b42] {  # if_20
          %b41 = block {  # true
            exit_if  # if_20
          }
          %b42 = block {  # false
            exit_loop  # loop_2
          }
        }
        %x_381:i32 = load %k
        %115:i32 = load %k
        %116:i32 = add %115, 1i
        store %k, %116
        %x_383:i32 = load %i
        %118:i32 = load %i
        %119:i32 = add %118, 1i
        store %i, %119
        %120:ptr<private, i32, read_write> = access %temp, %x_381
        %121:ptr<private, i32, read_write> = access %data, %x_383
        %122:i32 = load %121
        store %120, %122
        continue %b40
      }
      %b40 = block {  # continuing
        next_iteration %b39
      }
    }
    %123:i32 = load %f
    store %i_1, %123
    loop [b: %b43, c: %b44] {  # loop_3
      %b43 = block {  # body
        %124:i32 = load %i_1
        %125:i32 = load %to
        %126:bool = lte %124, %125
        if %126 [t: %b45, f: %b46] {  # if_21
          %b45 = block {  # true
            exit_if  # if_21
          }
          %b46 = block {  # false
            exit_loop  # loop_3
          }
        }
        %x_397:i32 = load %i_1
        %128:ptr<private, i32, read_write> = access %data, %x_397
        %129:i32 = load %i_1
        %130:ptr<private, i32, read_write> = access %temp, %129
        %131:i32 = load %130
        store %128, %131
        continue %b44
      }
      %b44 = block {  # continuing
        %132:i32 = load %i_1
        %133:i32 = add %132, 1i
        store %i_1, %133
        next_iteration %b43
      }
    }
    ret
  }
}
%mergeSort_ = func():void -> %b47 {
  %b47 = block {
    %low:ptr<function, i32, read_write> = var
    %high:ptr<function, i32, read_write> = var
    %m:ptr<function, i32, read_write> = var
    %i_2:ptr<function, i32, read_write> = var
    %f_1:ptr<function, i32, read_write> = var
    %mid_1:ptr<function, i32, read_write> = var
    %to_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    store %low, 0i
    store %high, 9i
    store %m, 1i
    loop [b: %b48, c: %b49] {  # loop_4
      %b48 = block {  # body
        %145:i32 = load %m
        %146:i32 = load %high
        %147:bool = lte %145, %146
        if %147 [t: %b50, f: %b51] {  # if_22
          %b50 = block {  # true
            exit_if  # if_22
          }
          %b51 = block {  # false
            exit_loop  # loop_4
          }
        }
        %148:i32 = load %low
        store %i_2, %148
        loop [b: %b52, c: %b53] {  # loop_5
          %b52 = block {  # body
            %149:i32 = load %i_2
            %150:i32 = load %high
            %151:bool = lt %149, %150
            if %151 [t: %b54, f: %b55] {  # if_23
              %b54 = block {  # true
                exit_if  # if_23
              }
              %b55 = block {  # false
                exit_loop  # loop_5
              }
            }
            %152:i32 = load %i_2
            store %f_1, %152
            %153:i32 = load %i_2
            %154:i32 = load %m
            %155:i32 = add %153, %154
            %156:i32 = sub %155, 1i
            store %mid_1, %156
            %157:i32 = load %i_2
            %158:i32 = load %m
            %159:i32 = mul 2i, %158
            %160:i32 = add %157, %159
            %161:i32 = sub %160, 1i
            %162:i32 = load %high
            %163:i32 = min %161, %162
            store %to_1, %163
            %164:i32 = load %f_1
            store %param, %164
            %165:i32 = load %mid_1
            store %param_1, %165
            %166:i32 = load %to_1
            store %param_2, %166
            %167:void = call %merge_i1_i1_i1_, %param, %param_1, %param_2
            continue %b53
          }
          %b53 = block {  # continuing
            %168:i32 = load %i_2
            %169:i32 = load %m
            %170:i32 = mul 2i, %169
            %171:i32 = add %168, %170
            store %i_2, %171
            next_iteration %b52
          }
        }
        continue %b49
      }
      %b49 = block {  # continuing
        %172:i32 = load %m
        %173:i32 = mul 2i, %172
        store %m, %173
        next_iteration %b48
      }
    }
    ret
  }
}
%main_1 = func():void -> %b56 {
  %b56 = block {
    %i_3:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %grey:ptr<function, f32, read_write> = var
    %178:ptr<uniform, vec2<f32>, read> = access %x_28, 0u
    %179:f32 = load_vector_element %178, 0u
    %180:i32 = convert %179
    store %i_3, %180
    loop [b: %b57, c: %b58] {  # loop_6
      %b57 = block {  # body
        %x_94:i32 = load %i_3
        switch %x_94 [c: (9i, %b59), c: (8i, %b60), c: (7i, %b61), c: (6i, %b62), c: (5i, %b63), c: (4i, %b64), c: (3i, %b65), c: (2i, %b66), c: (1i, %b67), c: (0i, %b68), c: (default, %b69)] {  # switch_1
          %b59 = block {  # case
            %x_124:i32 = load %i_3
            %183:ptr<private, i32, read_write> = access %data, %x_124
            store %183, -5i
            exit_switch  # switch_1
          }
          %b60 = block {  # case
            %x_122:i32 = load %i_3
            %185:ptr<private, i32, read_write> = access %data, %x_122
            store %185, -4i
            exit_switch  # switch_1
          }
          %b61 = block {  # case
            %x_120:i32 = load %i_3
            %187:ptr<private, i32, read_write> = access %data, %x_120
            store %187, -3i
            exit_switch  # switch_1
          }
          %b62 = block {  # case
            %x_118:i32 = load %i_3
            %189:ptr<private, i32, read_write> = access %data, %x_118
            store %189, -2i
            exit_switch  # switch_1
          }
          %b63 = block {  # case
            %x_116:i32 = load %i_3
            %191:ptr<private, i32, read_write> = access %data, %x_116
            store %191, -1i
            exit_switch  # switch_1
          }
          %b64 = block {  # case
            %x_114:i32 = load %i_3
            %193:ptr<private, i32, read_write> = access %data, %x_114
            store %193, 0i
            exit_switch  # switch_1
          }
          %b65 = block {  # case
            %x_112:i32 = load %i_3
            %195:ptr<private, i32, read_write> = access %data, %x_112
            store %195, 1i
            exit_switch  # switch_1
          }
          %b66 = block {  # case
            %x_110:i32 = load %i_3
            %197:ptr<private, i32, read_write> = access %data, %x_110
            store %197, 2i
            exit_switch  # switch_1
          }
          %b67 = block {  # case
            %x_108:i32 = load %i_3
            %199:ptr<private, i32, read_write> = access %data, %x_108
            store %199, 3i
            exit_switch  # switch_1
          }
          %b68 = block {  # case
            %x_106:i32 = load %i_3
            %201:ptr<private, i32, read_write> = access %data, %x_106
            store %201, 4i
            exit_switch  # switch_1
          }
          %b69 = block {  # case
            exit_switch  # switch_1
          }
        }
        %202:i32 = load %i_3
        %203:i32 = add %202, 1i
        store %i_3, %203
        continue %b58
      }
      %b58 = block {  # continuing
        %x_128:i32 = load %i_3
        %205:bool = lt %x_128, 10i
        %206:bool = eq %205, false
        break_if %206 %b57
      }
    }
    store %j_1, 0i
    loop [b: %b70, c: %b71] {  # loop_7
      %b70 = block {  # body
        %207:i32 = load %j_1
        %208:bool = lt %207, 10i
        if %208 [t: %b72, f: %b73] {  # if_24
          %b72 = block {  # true
            exit_if  # if_24
          }
          %b73 = block {  # false
            exit_loop  # loop_7
          }
        }
        %x_137:i32 = load %j_1
        %210:ptr<private, i32, read_write> = access %temp, %x_137
        %211:i32 = load %j_1
        %212:ptr<private, i32, read_write> = access %data, %211
        %213:i32 = load %212
        store %210, %213
        continue %b71
      }
      %b71 = block {  # continuing
        %214:i32 = load %j_1
        %215:i32 = add %214, 1i
        store %j_1, %215
        next_iteration %b70
      }
    }
    %216:void = call %mergeSort_
    %217:f32 = load_vector_element %gl_FragCoord, 1u
    %218:i32 = convert %217
    %219:bool = lt %218, 30i
    if %219 [t: %b74, f: %b75] {  # if_25
      %b74 = block {  # true
        %220:ptr<private, i32, read_write> = access %data, 0i
        %221:i32 = load %220
        %222:f32 = convert %221
        %223:f32 = div %222, 10.0f
        %224:f32 = add 0.5f, %223
        store %grey, %224
        exit_if  # if_25
      }
      %b75 = block {  # false
        %225:f32 = load_vector_element %gl_FragCoord, 1u
        %226:i32 = convert %225
        %227:bool = lt %226, 60i
        if %227 [t: %b76, f: %b77] {  # if_26
          %b76 = block {  # true
            %228:ptr<private, i32, read_write> = access %data, 1i
            %229:i32 = load %228
            %230:f32 = convert %229
            %231:f32 = div %230, 10.0f
            %232:f32 = add 0.5f, %231
            store %grey, %232
            exit_if  # if_26
          }
          %b77 = block {  # false
            %233:f32 = load_vector_element %gl_FragCoord, 1u
            %234:i32 = convert %233
            %235:bool = lt %234, 90i
            if %235 [t: %b78, f: %b79] {  # if_27
              %b78 = block {  # true
                %236:ptr<private, i32, read_write> = access %data, 2i
                %237:i32 = load %236
                %238:f32 = convert %237
                %239:f32 = div %238, 10.0f
                %240:f32 = add 0.5f, %239
                store %grey, %240
                exit_if  # if_27
              }
              %b79 = block {  # false
                %241:f32 = load_vector_element %gl_FragCoord, 1u
                %242:i32 = convert %241
                %243:bool = lt %242, 120i
                if %243 [t: %b80, f: %b81] {  # if_28
                  %b80 = block {  # true
                    %244:ptr<private, i32, read_write> = access %data, 3i
                    %245:i32 = load %244
                    %246:f32 = convert %245
                    %247:f32 = div %246, 10.0f
                    %248:f32 = add 0.5f, %247
                    store %grey, %248
                    exit_if  # if_28
                  }
                  %b81 = block {  # false
                    %249:f32 = load_vector_element %gl_FragCoord, 1u
                    %250:i32 = convert %249
                    %251:bool = lt %250, 150i
                    if %251 [t: %b82, f: %b83] {  # if_29
                      %b82 = block {  # true
                        discard
                        exit_if  # if_29
                      }
                      %b83 = block {  # false
                        %252:f32 = load_vector_element %gl_FragCoord, 1u
                        %253:i32 = convert %252
                        %254:bool = lt %253, 180i
                        if %254 [t: %b84, f: %b85] {  # if_30
                          %b84 = block {  # true
                            %255:ptr<private, i32, read_write> = access %data, 5i
                            %256:i32 = load %255
                            %257:f32 = convert %256
                            %258:f32 = div %257, 10.0f
                            %259:f32 = add 0.5f, %258
                            store %grey, %259
                            exit_if  # if_30
                          }
                          %b85 = block {  # false
                            %260:f32 = load_vector_element %gl_FragCoord, 1u
                            %261:i32 = convert %260
                            %262:bool = lt %261, 210i
                            if %262 [t: %b86, f: %b87] {  # if_31
                              %b86 = block {  # true
                                %263:ptr<private, i32, read_write> = access %data, 6i
                                %264:i32 = load %263
                                %265:f32 = convert %264
                                %266:f32 = div %265, 10.0f
                                %267:f32 = add 0.5f, %266
                                store %grey, %267
                                exit_if  # if_31
                              }
                              %b87 = block {  # false
                                %268:f32 = load_vector_element %gl_FragCoord, 1u
                                %269:i32 = convert %268
                                %270:bool = lt %269, 240i
                                if %270 [t: %b88, f: %b89] {  # if_32
                                  %b88 = block {  # true
                                    %271:ptr<private, i32, read_write> = access %data, 7i
                                    %272:i32 = load %271
                                    %273:f32 = convert %272
                                    %274:f32 = div %273, 10.0f
                                    %275:f32 = add 0.5f, %274
                                    store %grey, %275
                                    exit_if  # if_32
                                  }
                                  %b89 = block {  # false
                                    %276:f32 = load_vector_element %gl_FragCoord, 1u
                                    %277:i32 = convert %276
                                    %278:bool = lt %277, 270i
                                    if %278 [t: %b90, f: %b91] {  # if_33
                                      %b90 = block {  # true
                                        %279:ptr<private, i32, read_write> = access %data, 8i
                                        %280:i32 = load %279
                                        %281:f32 = convert %280
                                        %282:f32 = div %281, 10.0f
                                        %283:f32 = add 0.5f, %282
                                        store %grey, %283
                                        exit_if  # if_33
                                      }
                                      %b91 = block {  # false
                                        discard
                                        exit_if  # if_33
                                      }
                                    }
                                    exit_if  # if_32
                                  }
                                }
                                exit_if  # if_31
                              }
                            }
                            exit_if  # if_30
                          }
                        }
                        exit_if  # if_29
                      }
                    }
                    exit_if  # if_28
                  }
                }
                exit_if  # if_27
              }
            }
            exit_if  # if_26
          }
        }
        exit_if  # if_25
      }
    }
    %284:f32 = load %grey
    %x_249:vec3<f32> = construct %284
    %286:f32 = access %x_249, 0u
    %287:f32 = access %x_249, 1u
    %288:f32 = access %x_249, 2u
    %289:vec4<f32> = construct %286, %287, %288, 1.0f
    store %x_GLF_color, %289
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out -> %b92 {
  %b92 = block {
    store %gl_FragCoord, %gl_FragCoord_param
    %292:void = call %main_1
    %293:vec4<f32> = load %x_GLF_color
    %294:main_out = construct %293
    ret %294
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
