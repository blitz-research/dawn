SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: QuicksortObject = struct @align(4) {
  numbers:array<i32, 10> @offset(0)
}

buf0 = struct @align(8) {
  resolution:vec2<f32> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %obj:ptr<private, QuicksortObject, read_write> = var
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_32:ptr<uniform, buf0, read> = var @binding_point(0, 0)
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
}

%swap_i1_i1_ = func(%i:ptr<function, i32, read_write>, %j:ptr<function, i32, read_write>, %x_228:mat3x3<f32>):void -> %b2 {
  %b2 = block {
    %temp:ptr<function, i32, read_write> = var
    %x_230:i32 = load %i
    %11:ptr<private, i32, read_write> = access %obj, 0u, %x_230
    %x_232:i32 = load %11
    store %temp, %x_232
    %x_233:i32 = load %i
    %x_234:i32 = load %j
    %15:ptr<private, i32, read_write> = access %obj, 0u, %x_234
    %x_236:i32 = load %15
    %17:ptr<private, i32, read_write> = access %obj, 0u, %x_233
    store %17, %x_236
    %x_238:i32 = load %j
    %x_239:i32 = load %temp
    %20:ptr<private, i32, read_write> = access %obj, 0u, %x_238
    store %20, %x_239
    ret
  }
}
%performPartition_i1_i1_ = func(%l:ptr<function, i32, read_write>, %h:ptr<function, i32, read_write>):i32 -> %b3 {
  %b3 = block {
    %pivot:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %j_1:ptr<function, i32, read_write> = var
    %param:ptr<function, i32, read_write> = var
    %param_1:ptr<function, i32, read_write> = var
    %param_2:ptr<function, i32, read_write> = var
    %param_3:ptr<function, i32, read_write> = var
    %x_242:i32 = load %h
    %32:ptr<private, i32, read_write> = access %obj, 0u, %x_242
    %x_244:i32 = load %32
    store %pivot, %x_244
    %x_245:i32 = load %l
    %35:i32 = sub %x_245, 1i
    store %i_1, %35
    %x_247:i32 = load %l
    store %j_1, %x_247
    loop [b: %b4, c: %b5] {  # loop_1
      %b4 = block {  # body
        %x_252:i32 = load %j_1
        %x_253:i32 = load %h
        %39:i32 = sub %x_253, 1i
        %40:bool = lte %x_252, %39
        if %40 [t: %b6, f: %b7] {  # if_1
          %b6 = block {  # true
            exit_if  # if_1
          }
          %b7 = block {  # false
            exit_loop  # loop_1
          }
        }
        %x_257:i32 = load %j_1
        %42:ptr<private, i32, read_write> = access %obj, 0u, %x_257
        %x_259:i32 = load %42
        %x_260:i32 = load %pivot
        %45:bool = lte %x_259, %x_260
        if %45 [t: %b8] {  # if_2
          %b8 = block {  # true
            %x_264:i32 = load %i_1
            %47:i32 = add %x_264, 1i
            store %i_1, %47
            %x_266:i32 = load %i_1
            store %param, %x_266
            %x_267:i32 = load %j_1
            store %param_1, %x_267
            %50:void = call %swap_i1_i1_, %param, %param_1, mat3x3<f32>(vec3<f32>(0.0f))
            exit_if  # if_2
          }
        }
        continue %b5
      }
      %b5 = block {  # continuing
        %x_269:i32 = load %j_1
        %52:i32 = add %x_269, 1i
        store %j_1, %52
        next_iteration %b4
      }
    }
    %x_271:i32 = load %i_1
    %54:i32 = add %x_271, 1i
    store %i_1, %54
    %x_273:i32 = load %i_1
    store %param_2, %x_273
    %x_274:i32 = load %h
    store %param_3, %x_274
    %57:void = call %swap_i1_i1_, %param_2, %param_3, mat3x3<f32>(vec3<f32>(0.0f))
    %x_276:i32 = load %i_1
    ret %x_276
  }
}
%quicksort_ = func():void -> %b9 {
  %b9 = block {
    %l_1:ptr<function, i32, read_write> = var
    %h_1:ptr<function, i32, read_write> = var
    %top:ptr<function, i32, read_write> = var
    %stack:ptr<function, array<i32, 10>, read_write> = var
    %p:ptr<function, i32, read_write> = var
    %param_4:ptr<function, i32, read_write> = var
    %param_5:ptr<function, i32, read_write> = var
    store %l_1, 0i
    store %h_1, 9i
    store %top, -1i
    %x_278:i32 = load %top
    %x_279:i32 = add %x_278, 1i
    store %top, %x_279
    %x_280:i32 = load %l_1
    %70:ptr<function, i32, read_write> = access %stack, %x_279
    store %70, %x_280
    %x_282:i32 = load %top
    %x_283:i32 = add %x_282, 1i
    store %top, %x_283
    %x_284:i32 = load %h_1
    %74:ptr<function, i32, read_write> = access %stack, %x_283
    store %74, %x_284
    loop [b: %b10, c: %b11] {  # loop_2
      %b10 = block {  # body
        %x_290:i32 = load %top
        %76:bool = gte %x_290, 0i
        if %76 [t: %b12, f: %b13] {  # if_3
          %b12 = block {  # true
            exit_if  # if_3
          }
          %b13 = block {  # false
            exit_loop  # loop_2
          }
        }
        %x_293:i32 = load %top
        %78:i32 = sub %x_293, 1i
        store %top, %78
        %79:ptr<function, i32, read_write> = access %stack, %x_293
        %x_296:i32 = load %79
        store %h_1, %x_296
        %x_297:i32 = load %top
        %82:i32 = sub %x_297, 1i
        store %top, %82
        %83:ptr<function, i32, read_write> = access %stack, %x_297
        %x_300:i32 = load %83
        store %l_1, %x_300
        %x_301:i32 = load %l_1
        store %param_4, %x_301
        %x_302:i32 = load %h_1
        store %param_5, %x_302
        %x_303:i32 = call %performPartition_i1_i1_, %param_4, %param_5
        store %p, %x_303
        %x_304:i32 = load %p
        %x_306:i32 = load %l_1
        %90:i32 = sub %x_304, 1i
        %91:bool = gt %90, %x_306
        if %91 [t: %b14] {  # if_4
          %b14 = block {  # true
            %x_310:i32 = load %top
            %x_311:i32 = add %x_310, 1i
            store %top, %x_311
            %x_312:i32 = load %l_1
            %95:ptr<function, i32, read_write> = access %stack, %x_311
            store %95, %x_312
            %x_314:i32 = load %top
            %x_315:i32 = add %x_314, 1i
            store %top, %x_315
            %x_316:i32 = load %p
            %99:ptr<function, i32, read_write> = access %stack, %x_315
            %100:i32 = sub %x_316, 1i
            store %99, %100
            exit_if  # if_4
          }
        }
        %x_319:i32 = load %p
        %x_321:i32 = load %h_1
        %103:i32 = add %x_319, 1i
        %104:bool = lt %103, %x_321
        if %104 [t: %b15] {  # if_5
          %b15 = block {  # true
            %x_325:i32 = load %top
            %x_326:i32 = add %x_325, 1i
            store %top, %x_326
            %x_327:i32 = load %p
            %108:ptr<function, i32, read_write> = access %stack, %x_326
            %109:i32 = add %x_327, 1i
            store %108, %109
            %x_330:i32 = load %top
            %x_331:i32 = add %x_330, 1i
            store %top, %x_331
            %x_332:i32 = load %h_1
            %113:ptr<function, i32, read_write> = access %stack, %x_331
            store %113, %x_332
            exit_if  # if_5
          }
        }
        continue %b11
      }
      %b11 = block {  # continuing
        next_iteration %b10
      }
    }
    ret
  }
}
%main_1 = func():void -> %b16 {
  %b16 = block {
    %i_2:ptr<function, i32, read_write> = var
    %uv:ptr<function, vec2<f32>, read_write> = var
    %color:ptr<function, vec3<f32>, read_write> = var
    store %i_2, 0i
    loop [b: %b17, c: %b18] {  # loop_3
      %b17 = block {  # body
        %x_89:i32 = load %i_2
        %119:bool = lt %x_89, 10i
        if %119 [t: %b19, f: %b20] {  # if_6
          %b19 = block {  # true
            exit_if  # if_6
          }
          %b20 = block {  # false
            exit_loop  # loop_3
          }
        }
        %x_92:i32 = load %i_2
        %x_93:i32 = load %i_2
        %122:ptr<private, i32, read_write> = access %obj, 0u, %x_92
        %123:i32 = sub 10i, %x_93
        store %122, %123
        %x_96:i32 = load %i_2
        %x_97:i32 = load %i_2
        %126:ptr<private, i32, read_write> = access %obj, 0u, %x_97
        %x_99:i32 = load %126
        %x_100:i32 = load %i_2
        %129:ptr<private, i32, read_write> = access %obj, 0u, %x_100
        %x_102:i32 = load %129
        %131:ptr<private, i32, read_write> = access %obj, 0u, %x_96
        %132:i32 = mul %x_99, %x_102
        store %131, %132
        continue %b18
      }
      %b18 = block {  # continuing
        %x_105:i32 = load %i_2
        %134:i32 = add %x_105, 1i
        store %i_2, %134
        next_iteration %b17
      }
    }
    %135:void = call %quicksort_
    %x_108:vec4<f32> = load %gl_FragCoord
    %137:ptr<uniform, vec2<f32>, read> = access %x_32, 0u
    %x_111:vec2<f32> = load %137
    %139:f32 = access %x_108, 0u
    %140:f32 = access %x_108, 1u
    %141:vec2<f32> = construct %139, %140
    %142:vec2<f32> = div %141, %x_111
    store %uv, %142
    store %color, vec3<f32>(1.0f, 2.0f, 3.0f)
    %143:ptr<private, i32, read_write> = access %obj, 0u, 0i
    %x_114:i32 = load %143
    %x_117:f32 = load_vector_element %color, 0u
    %146:f32 = convert %x_114
    %147:f32 = add %x_117, %146
    store_vector_element %color, 0u, %147
    %x_121:f32 = load_vector_element %uv, 0u
    %149:bool = gt %x_121, 0.25f
    if %149 [t: %b21] {  # if_7
      %b21 = block {  # true
        %150:ptr<private, i32, read_write> = access %obj, 0u, 1i
        %x_126:i32 = load %150
        %x_129:f32 = load_vector_element %color, 0u
        %153:f32 = convert %x_126
        %154:f32 = add %x_129, %153
        store_vector_element %color, 0u, %154
        exit_if  # if_7
      }
    }
    %x_133:f32 = load_vector_element %uv, 0u
    %156:bool = gt %x_133, 0.5f
    if %156 [t: %b22] {  # if_8
      %b22 = block {  # true
        %157:ptr<private, i32, read_write> = access %obj, 0u, 2i
        %x_138:i32 = load %157
        %x_141:f32 = load_vector_element %color, 1u
        %160:f32 = convert %x_138
        %161:f32 = add %x_141, %160
        store_vector_element %color, 1u, %161
        exit_if  # if_8
      }
    }
    %x_145:f32 = load_vector_element %uv, 0u
    %163:bool = gt %x_145, 0.75f
    if %163 [t: %b23] {  # if_9
      %b23 = block {  # true
        %164:ptr<private, i32, read_write> = access %obj, 0u, 3i
        %x_150:i32 = load %164
        %x_153:f32 = load_vector_element %color, 2u
        %167:f32 = convert %x_150
        %168:f32 = add %x_153, %167
        store_vector_element %color, 2u, %168
        exit_if  # if_9
      }
    }
    %169:ptr<private, i32, read_write> = access %obj, 0u, 4i
    %x_157:i32 = load %169
    %x_160:f32 = load_vector_element %color, 1u
    %172:f32 = convert %x_157
    %173:f32 = add %x_160, %172
    store_vector_element %color, 1u, %173
    %x_164:f32 = load_vector_element %uv, 1u
    %175:bool = gt %x_164, 0.25f
    if %175 [t: %b24] {  # if_10
      %b24 = block {  # true
        %176:ptr<private, i32, read_write> = access %obj, 0u, 5i
        %x_169:i32 = load %176
        %x_172:f32 = load_vector_element %color, 0u
        %179:f32 = convert %x_169
        %180:f32 = add %x_172, %179
        store_vector_element %color, 0u, %180
        exit_if  # if_10
      }
    }
    %x_176:f32 = load_vector_element %uv, 1u
    %182:bool = gt %x_176, 0.5f
    if %182 [t: %b25] {  # if_11
      %b25 = block {  # true
        %183:ptr<private, i32, read_write> = access %obj, 0u, 6i
        %x_181:i32 = load %183
        %x_184:f32 = load_vector_element %color, 1u
        %186:f32 = convert %x_181
        %187:f32 = add %x_184, %186
        store_vector_element %color, 1u, %187
        exit_if  # if_11
      }
    }
    %x_188:f32 = load_vector_element %uv, 1u
    %189:bool = gt %x_188, 0.75f
    if %189 [t: %b26] {  # if_12
      %b26 = block {  # true
        %190:ptr<private, i32, read_write> = access %obj, 0u, 7i
        %x_193:i32 = load %190
        %x_196:f32 = load_vector_element %color, 2u
        %193:f32 = convert %x_193
        %194:f32 = add %x_196, %193
        store_vector_element %color, 2u, %194
        exit_if  # if_12
      }
    }
    %195:ptr<private, i32, read_write> = access %obj, 0u, 8i
    %x_200:i32 = load %195
    %x_203:f32 = load_vector_element %color, 2u
    %198:f32 = convert %x_200
    %199:f32 = add %x_203, %198
    store_vector_element %color, 2u, %199
    %x_207:f32 = load_vector_element %uv, 0u
    %x_209:f32 = load_vector_element %uv, 1u
    %202:f32 = sub %x_207, %x_209
    %203:f32 = abs %202
    %204:bool = lt %203, 0.25f
    if %204 [t: %b27] {  # if_13
      %b27 = block {  # true
        %205:ptr<private, i32, read_write> = access %obj, 0u, 9i
        %x_216:i32 = load %205
        %x_219:f32 = load_vector_element %color, 0u
        %208:f32 = convert %x_216
        %209:f32 = add %x_219, %208
        store_vector_element %color, 0u, %209
        exit_if  # if_13
      }
    }
    %x_222:vec3<f32> = load %color
    %x_223:vec3<f32> = normalize %x_222
    %212:f32 = access %x_223, 0u
    %213:f32 = access %x_223, 1u
    %214:f32 = access %x_223, 2u
    %215:vec4<f32> = construct %212, %213, %214, 1.0f
    store %x_GLF_color, %215
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out -> %b28 {
  %b28 = block {
    store %gl_FragCoord, %gl_FragCoord_param
    %218:void = call %main_1
    %219:vec4<f32> = load %x_GLF_color
    %220:main_out = construct %219
    ret %220
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
