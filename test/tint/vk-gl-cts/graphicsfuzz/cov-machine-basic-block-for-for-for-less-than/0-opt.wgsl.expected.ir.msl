SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: strided_arr = struct @align(4) {
  el:i32 @offset(0)
}

buf1 = struct @align(4) {
  x_GLF_uniform_int_values:array<strided_arr, 6> @offset(0)
}

strided_arr_1 = struct @align(4) {
  el:f32 @offset(0)
}

buf0 = struct @align(4) {
  x_GLF_uniform_float_values:array<strided_arr_1, 1> @offset(0)
}

main_out = struct @align(16) {
  x_GLF_color_1:vec4<f32> @offset(0), @location(0)
}

%b1 = block {  # root
  %x_GLF_color:ptr<private, vec4<f32>, read_write> = var
  %x_6:ptr<uniform, buf1, read> = var @binding_point(0, 1)
  %gl_FragCoord:ptr<private, vec4<f32>, read_write> = var
  %x_12:ptr<uniform, buf0, read> = var @binding_point(0, 0)
}

%main_1 = func():void -> %b2 {
  %b2 = block {
    %data:ptr<function, array<i32, 5>, read_write> = var
    %a:ptr<function, i32, read_write> = var
    %i:ptr<function, i32, read_write> = var
    %j:ptr<function, i32, read_write> = var
    %i_1:ptr<function, i32, read_write> = var
    %11:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
    %x_45:i32 = load %11
    %13:ptr<uniform, i32, read> = access %x_6, 0u, 5i, 0u
    %x_48:i32 = load %13
    %15:ptr<uniform, i32, read> = access %x_6, 0u, 5i, 0u
    %x_51:i32 = load %15
    %17:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
    %x_54:i32 = load %17
    %19:f32 = convert %x_45
    %20:f32 = convert %x_48
    %21:f32 = convert %x_51
    %22:f32 = convert %x_54
    %23:vec4<f32> = construct %19, %20, %21, %22
    store %x_GLF_color, %23
    %24:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
    %x_58:i32 = load %24
    %26:ptr<uniform, i32, read> = access %x_6, 0u, 2i, 0u
    %x_60:i32 = load %26
    %28:ptr<uniform, i32, read> = access %x_6, 0u, 3i, 0u
    %x_62:i32 = load %28
    %30:ptr<uniform, i32, read> = access %x_6, 0u, 4i, 0u
    %x_64:i32 = load %30
    %32:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
    %x_66:i32 = load %32
    %34:array<i32, 5> = construct %x_58, %x_60, %x_62, %x_64, %x_66
    store %data, %34
    %35:ptr<uniform, i32, read> = access %x_6, 0u, 5i, 0u
    %x_69:i32 = load %35
    store %a, %x_69
    loop [b: %b3, c: %b4] {  # loop_1
      %b3 = block {  # body
        %x_74:i32 = load %a
        %38:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
        %x_76:i32 = load %38
        %40:bool = lt %x_74, %x_76
        if %40 [t: %b5, f: %b6] {  # if_1
          %b5 = block {  # true
            exit_if  # if_1
          }
          %b6 = block {  # false
            exit_loop  # loop_1
          }
        }
        %41:ptr<uniform, i32, read> = access %x_6, 0u, 5i, 0u
        %x_80:i32 = load %41
        store %i, %x_80
        loop [b: %b7, c: %b8] {  # loop_2
          %b7 = block {  # body
            %x_85:i32 = load %i
            %44:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
            %x_87:i32 = load %44
            %46:bool = lt %x_85, %x_87
            if %46 [t: %b9, f: %b10] {  # if_2
              %b9 = block {  # true
                exit_if  # if_2
              }
              %b10 = block {  # false
                exit_loop  # loop_2
              }
            }
            %x_90:i32 = load %i
            store %j, %x_90
            loop [b: %b11, c: %b12] {  # loop_3
              %b11 = block {  # body
                %x_95:i32 = load %j
                %49:ptr<uniform, i32, read> = access %x_6, 0u, 1i, 0u
                %x_97:i32 = load %49
                %51:bool = lt %x_95, %x_97
                if %51 [t: %b13, f: %b14] {  # if_3
                  %b13 = block {  # true
                    exit_if  # if_3
                  }
                  %b14 = block {  # false
                    exit_loop  # loop_3
                  }
                }
                %x_100:i32 = load %i
                %53:ptr<function, i32, read_write> = access %data, %x_100
                %x_102:i32 = load %53
                %x_103:i32 = load %j
                %56:ptr<function, i32, read_write> = access %data, %x_103
                %x_105:i32 = load %56
                %58:bool = lt %x_102, %x_105
                if %58 [t: %b15] {  # if_4
                  %b15 = block {  # true
                    %59:ptr<uniform, i32, read> = access %x_6, 0u, 5i, 0u
                    %x_110:i32 = load %59
                    %x_111:f32 = convert %x_110
                    %62:vec4<f32> = construct %x_111, %x_111, %x_111, %x_111
                    store %x_GLF_color, %62
                    exit_if  # if_4
                  }
                }
                continue %b12
              }
              %b12 = block {  # continuing
                %x_113:i32 = load %j
                %64:i32 = add %x_113, 1i
                store %j, %64
                next_iteration %b11
              }
            }
            continue %b8
          }
          %b8 = block {  # continuing
            %x_115:i32 = load %i
            %66:i32 = add %x_115, 1i
            store %i, %66
            next_iteration %b7
          }
        }
        continue %b4
      }
      %b4 = block {  # continuing
        %x_117:i32 = load %a
        %68:i32 = add %x_117, 1i
        store %a, %68
        next_iteration %b3
      }
    }
    loop [b: %b16, c: %b17] {  # loop_4
      %b16 = block {  # body
        %x_124:f32 = load_vector_element %gl_FragCoord, 0u
        %70:ptr<uniform, f32, read> = access %x_12, 0u, 0i, 0u
        %x_126:f32 = load %70
        %72:bool = lt %x_124, %x_126
        if %72 [t: %b18, f: %b19] {  # if_5
          %b18 = block {  # true
            exit_if  # if_5
          }
          %b19 = block {  # false
            exit_loop  # loop_4
          }
        }
        %73:ptr<uniform, i32, read> = access %x_6, 0u, 5i, 0u
        %x_130:i32 = load %73
        store %i_1, %x_130
        loop [b: %b20, c: %b21] {  # loop_5
          %b20 = block {  # body
            %x_135:i32 = load %i_1
            %76:ptr<uniform, i32, read> = access %x_6, 0u, 0i, 0u
            %x_137:i32 = load %76
            %78:bool = lt %x_135, %x_137
            if %78 [t: %b22, f: %b23] {  # if_6
              %b22 = block {  # true
                exit_if  # if_6
              }
              %b23 = block {  # false
                exit_loop  # loop_5
              }
            }
            %79:ptr<uniform, i32, read> = access %x_6, 0u, 5i, 0u
            %x_141:i32 = load %79
            %x_142:f32 = convert %x_141
            %82:vec4<f32> = construct %x_142, %x_142, %x_142, %x_142
            store %x_GLF_color, %82
            continue %b21
          }
          %b21 = block {  # continuing
            %x_144:i32 = load %i_1
            %84:i32 = add %x_144, 1i
            store %i_1, %84
            next_iteration %b20
          }
        }
        continue %b17
      }
      %b17 = block {  # continuing
        next_iteration %b16
      }
    }
    ret
  }
}
%tint_symbol = @fragment func(%gl_FragCoord_param:vec4<f32> [@position]):main_out -> %b24 {
  %b24 = block {
    store %gl_FragCoord, %gl_FragCoord_param
    %87:void = call %main_1
    %88:vec4<f32> = load %x_GLF_color
    %89:main_out = construct %88
    ret %89
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
