#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_packed_vec3_f16_array_element {
  /* 0x0000 */ packed_half3 elements;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

half3x3 tint_unpack_vec3_in_composite(tint_array<tint_packed_vec3_f16_array_element, 3> in) {
  half3x3 result = half3x3(0.0h);
  for(uint i = 0u; (i < 3u); i = (i + 1u)) {
    __asm__("");
    result[i] = half3(in[i].elements);
  }
  return result;
}

kernel void f(const constant tint_array<tint_packed_vec3_f16_array_element, 3>* tint_symbol [[buffer(0)]]) {
  half3x3 const t = transpose(tint_unpack_vec3_in_composite(*(tint_symbol)));
  half const l = length(half3((*(tint_symbol))[1].elements));
  half const a = fabs(half3((*(tint_symbol))[0].elements).zxy[0]);
  return;
}

