#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

void a(tint_array<half4x4, 4> a_1) {
}

void b(half4x4 m) {
}

void c(half4 v) {
}

void d(half f_1) {
}

kernel void f(const constant tint_array<half4x4, 4>* tint_symbol [[buffer(0)]]) {
  a(*(tint_symbol));
  b((*(tint_symbol))[1]);
  c((*(tint_symbol))[1][0].ywxz);
  d((*(tint_symbol))[1][0].ywxz[0]);
  return;
}

