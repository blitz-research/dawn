#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_private_vars_struct {
  int counter;
};

int i(thread tint_private_vars_struct* const tint_private_vars) {
  (*(tint_private_vars)).counter = as_type<int>((as_type<uint>((*(tint_private_vars)).counter) + as_type<uint>(1)));
  return (*(tint_private_vars)).counter;
}

kernel void f(const constant tint_array<half4x2, 4>* tint_symbol_2 [[buffer(0)]]) {
  thread tint_private_vars_struct tint_private_vars = {};
  tint_private_vars.counter = 0;
  int const tint_symbol = i(&(tint_private_vars));
  int const p_a_i_save = tint_symbol;
  int const tint_symbol_1 = i(&(tint_private_vars));
  int const p_a_i_i_save = tint_symbol_1;
  tint_array<half4x2, 4> const l_a = *(tint_symbol_2);
  half4x2 const l_a_i = (*(tint_symbol_2))[p_a_i_save];
  half2 const l_a_i_i = (*(tint_symbol_2))[p_a_i_save][p_a_i_i_save];
  return;
}

