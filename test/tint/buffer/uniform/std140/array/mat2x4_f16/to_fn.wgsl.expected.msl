#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

half a(tint_array<half2x4, 4> a_1) {
  return a_1[0][0][0];
}

half b(half2x4 m) {
  return m[0][0];
}

half c(half4 v) {
  return v[0];
}

half d(half f_1) {
  return f_1;
}

kernel void f(const constant tint_array<half2x4, 4>* tint_symbol_4 [[buffer(0)]], device half* tint_symbol_5 [[buffer(1)]]) {
  half const tint_symbol = a(*(tint_symbol_4));
  half const tint_symbol_1 = b((*(tint_symbol_4))[1]);
  half const tint_symbol_2 = c((*(tint_symbol_4))[1][0].ywxz);
  half const tint_symbol_3 = d((*(tint_symbol_4))[1][0].ywxz[0]);
  *(tint_symbol_5) = (((tint_symbol + tint_symbol_1) + tint_symbol_2) + tint_symbol_3);
  return;
}

