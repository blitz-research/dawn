#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_private_vars_struct {
  tint_array<float4x4, 4> p;
};

kernel void f(const constant tint_array<float4x4, 4>* tint_symbol [[buffer(0)]]) {
  thread tint_private_vars_struct tint_private_vars = {};
  tint_private_vars.p = *(tint_symbol);
  tint_private_vars.p[1] = (*(tint_symbol))[2];
  tint_private_vars.p[1][0] = (*(tint_symbol))[0][1].ywxz;
  tint_private_vars.p[1][0][0] = (*(tint_symbol))[0][1][0];
  return;
}

