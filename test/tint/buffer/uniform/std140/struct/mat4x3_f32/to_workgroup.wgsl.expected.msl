#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct S {
  int before;
  float4x3 m;
  int after;
};

struct tint_symbol_6 {
  tint_array<S, 4> w;
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 elements;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct S_tint_packed_vec3 {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 12> tint_pad_1;
  /* 0x0010 */ tint_array<tint_packed_vec3_f32_array_element, 4> m;
  /* 0x0050 */ tint_array<int8_t, 48> tint_pad_2;
  /* 0x0080 */ int after;
  /* 0x0084 */ tint_array<int8_t, 60> tint_pad_3;
};

float4x3 tint_unpack_vec3_in_composite(tint_array<tint_packed_vec3_f32_array_element, 4> in) {
  float4x3 result = float4x3(0.0f);
  for(uint i = 0u; (i < 4u); i = (i + 1u)) {
    result[i] = float3(in[i].elements);
  }
  return result;
}

S tint_unpack_vec3_in_composite_1(S_tint_packed_vec3 in) {
  S result = {};
  result.before = in.before;
  result.m = tint_unpack_vec3_in_composite(in.m);
  result.after = in.after;
  return result;
}

tint_array<S, 4> tint_unpack_vec3_in_composite_2(tint_array<S_tint_packed_vec3, 4> in) {
  tint_array<S, 4> result = {};
  for(uint i = 0u; (i < 4u); i = (i + 1u)) {
    result[i] = tint_unpack_vec3_in_composite_1(in[i]);
  }
  return result;
}

void f_inner(uint local_invocation_index, threadgroup tint_array<S, 4>* const tint_symbol_1, const constant tint_array<S_tint_packed_vec3, 4>* const tint_symbol_2) {
  for(uint idx = local_invocation_index; (idx < 4u); idx = (idx + 1u)) {
    uint const i = idx;
    S const tint_symbol = S{};
    (*(tint_symbol_1))[i] = tint_symbol;
  }
  threadgroup_barrier(mem_flags::mem_threadgroup);
  *(tint_symbol_1) = tint_unpack_vec3_in_composite_2(*(tint_symbol_2));
  (*(tint_symbol_1))[1] = tint_unpack_vec3_in_composite_1((*(tint_symbol_2))[2]);
  (*(tint_symbol_1))[3].m = tint_unpack_vec3_in_composite((*(tint_symbol_2))[2].m);
  (*(tint_symbol_1))[1].m[0] = float3((*(tint_symbol_2))[0].m[1].elements).zxy;
}

kernel void f(const constant tint_array<S_tint_packed_vec3, 4>* tint_symbol_5 [[buffer(0)]], threadgroup tint_symbol_6* tint_symbol_4 [[threadgroup(0)]], uint local_invocation_index [[thread_index_in_threadgroup]]) {
  threadgroup tint_array<S, 4>* const tint_symbol_3 = &((*(tint_symbol_4)).w);
  f_inner(local_invocation_index, tint_symbol_3, tint_symbol_5);
  return;
}

