#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct S {
  /* 0x0000 */ int before;
  /* 0x0004 */ half3x2 m;
  /* 0x0010 */ tint_array<int8_t, 48> tint_pad;
  /* 0x0040 */ int after;
  /* 0x0044 */ tint_array<int8_t, 60> tint_pad_1;
};

kernel void f(const constant tint_array<S, 4>* tint_symbol [[buffer(0)]]) {
  half2x3 const t = transpose((*(tint_symbol))[2].m);
  half const l = length((*(tint_symbol))[0].m[1].yx);
  half const a = fabs((*(tint_symbol))[0].m[1].yx[0]);
  return;
}

