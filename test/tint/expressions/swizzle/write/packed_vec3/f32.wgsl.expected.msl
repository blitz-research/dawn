#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct S_tint_packed_vec3 {
  /* 0x0000 */ packed_float3 v;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct S {
  float3 v;
};

void f(device S_tint_packed_vec3* const tint_symbol) {
  (*(tint_symbol)).v = packed_float3(1.0f, 2.0f, 3.0f);
  (*(tint_symbol)).v[0] = 1.0f;
  (*(tint_symbol)).v[1] = 2.0f;
  (*(tint_symbol)).v[2] = 3.0f;
}

