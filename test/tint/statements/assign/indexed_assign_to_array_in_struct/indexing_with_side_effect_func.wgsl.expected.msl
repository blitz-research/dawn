#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_private_vars_struct {
  uint nextIndex;
};

struct Uniforms {
  /* 0x0000 */ uint i;
  /* 0x0004 */ uint j;
};

struct InnerS {
  int v;
};

struct S1 {
  tint_array<InnerS, 8> a2;
};

struct OuterS {
  tint_array<S1, 8> a1;
};

uint getNextIndex(thread tint_private_vars_struct* const tint_private_vars) {
  (*(tint_private_vars)).nextIndex = ((*(tint_private_vars)).nextIndex + 1u);
  return (*(tint_private_vars)).nextIndex;
}

kernel void tint_symbol(const constant Uniforms* tint_symbol_2 [[buffer(0)]]) {
  thread tint_private_vars_struct tint_private_vars = {};
  InnerS v = {};
  OuterS s = {};
  uint const tint_symbol_1 = getNextIndex(&(tint_private_vars));
  s.a1[tint_symbol_1].a2[(*(tint_symbol_2)).j] = v;
  return;
}

