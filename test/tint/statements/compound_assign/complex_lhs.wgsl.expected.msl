#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_private_vars_struct {
  int counter;
};

struct S {
  tint_array<int4, 4> a;
};

int foo(thread tint_private_vars_struct* const tint_private_vars) {
  (*(tint_private_vars)).counter = as_type<int>((as_type<uint>((*(tint_private_vars)).counter) + as_type<uint>(1)));
  return (*(tint_private_vars)).counter;
}

int bar(thread tint_private_vars_struct* const tint_private_vars) {
  (*(tint_private_vars)).counter = as_type<int>((as_type<uint>((*(tint_private_vars)).counter) + as_type<uint>(2)));
  return (*(tint_private_vars)).counter;
}

void tint_symbol(thread tint_private_vars_struct* const tint_private_vars) {
  S x = S{};
  int const tint_symbol_3 = foo(tint_private_vars);
  int const tint_symbol_1_save = tint_symbol_3;
  int const tint_symbol_2 = bar(tint_private_vars);
  x.a[tint_symbol_1_save][tint_symbol_2] = as_type<int>((as_type<uint>(x.a[tint_symbol_1_save][tint_symbol_2]) + as_type<uint>(5)));
}

