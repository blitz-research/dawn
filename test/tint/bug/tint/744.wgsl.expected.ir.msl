SKIP: FAILED

<dawn>/src/tint/lang/msl/writer/printer/printer.cc:355 internal compiler error: Matrix = struct @align(4) {
  numbers:array<u32> @offset(0)
}

Uniforms = struct @align(8) {
  aShape:vec2<u32> @offset(0)
  bShape:vec2<u32> @offset(8)
  outShape:vec2<u32> @offset(16)
}

%b1 = block {  # root
  %firstMatrix:ptr<storage, Matrix, read> = var @binding_point(0, 0)
  %secondMatrix:ptr<storage, Matrix, read> = var @binding_point(0, 1)
  %resultMatrix:ptr<storage, Matrix, read_write> = var @binding_point(0, 2)
  %uniforms:ptr<uniform, Uniforms, read> = var @binding_point(0, 3)
}

%tint_symbol = @compute @workgroup_size(2, 2, 1) func(%global_id:vec3<u32> [@global_invocation_id]):void -> %b2 {
  %b2 = block {
    %7:u32 = access %global_id, 1u
    %8:u32 = access %global_id, 0u
    %resultCell:vec2<u32> = construct %7, %8
    %10:ptr<uniform, vec2<u32>, read> = access %uniforms, 0u
    %dimInner:u32 = load_vector_element %10, 1u
    %12:ptr<uniform, vec2<u32>, read> = access %uniforms, 2u
    %dimOutter:u32 = load_vector_element %12, 1u
    %result:ptr<function, u32, read_write> = var, 0u
    loop [i: %b3, b: %b4, c: %b5] {  # loop_1
      %b3 = block {  # initializer
        %i:ptr<function, u32, read_write> = var, 0u
        next_iteration %b4
      }
      %b4 = block {  # body
        %16:u32 = load %i
        %17:bool = lt %16, %dimInner
        if %17 [t: %b6, f: %b7] {  # if_1
          %b6 = block {  # true
            exit_if  # if_1
          }
          %b7 = block {  # false
            exit_loop  # loop_1
          }
        }
        %18:u32 = load %i
        %19:u32 = access %resultCell, 0u
        %20:u32 = mul %19, %dimInner
        %a:u32 = add %18, %20
        %22:u32 = access %resultCell, 1u
        %23:u32 = load %i
        %24:u32 = mul %23, %dimOutter
        %b:u32 = add %22, %24
        %26:u32 = load %result
        %27:ptr<storage, u32, read> = access %firstMatrix, 0u, %a
        %28:u32 = load %27
        %29:ptr<storage, u32, read> = access %secondMatrix, 0u, %b
        %30:u32 = load %29
        %31:u32 = mul %28, %30
        %32:u32 = add %26, %31
        store %result, %32
        continue %b5
      }
      %b5 = block {  # continuing
        %33:u32 = load %i
        %34:u32 = add %33, 1u
        store %i, %34
        next_iteration %b4
      }
    }
    %35:u32 = access %resultCell, 1u
    %36:u32 = access %resultCell, 0u
    %37:u32 = mul %36, %dimOutter
    %index:u32 = add %35, %37
    %39:ptr<storage, u32, read_write> = access %resultMatrix, 0u, %index
    %40:u32 = load %result
    store %39, %40
    ret
  }
}

unhandled variable address space
********************************************************************
*  The tint shader compiler has encountered an unexpected error.   *
*                                                                  *
*  Please help us fix this issue by submitting a bug report at     *
*  crbug.com/tint with the source program that triggered the bug.  *
********************************************************************
