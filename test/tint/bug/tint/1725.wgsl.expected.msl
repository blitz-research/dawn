#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct tint_symbol_10 {
  /* 0x0000 */ tint_array<uint, 1> arr;
};

struct TintArrayLengths {
  /* 0x0000 */ tint_array<uint4, 1> array_lengths;
};

void tint_symbol_1_inner(uint tint_symbol_2, const device tint_array<uint, 1>* const tint_symbol_7, const constant TintArrayLengths* const tint_symbol_8) {
  int const tint_symbol_3 = 0;
  int const tint_symbol_4 = 0;
  int const tint_symbol_5 = 0;
  uint const tint_symbol_6 = (*(tint_symbol_7))[min(tint_symbol_2, (((*(tint_symbol_8)).array_lengths[0u][0u] / 4u) - 1u))];
}

kernel void tint_symbol_1(const device tint_symbol_10* tint_symbol_9 [[buffer(0)]], const constant TintArrayLengths* tint_symbol_11 [[buffer(30)]], uint tint_symbol_2 [[thread_index_in_threadgroup]]) {
  tint_symbol_1_inner(tint_symbol_2, &((*(tint_symbol_9)).arr), tint_symbol_11);
  return;
}

