#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct Input_tint_packed_vec3 {
  /* 0x0000 */ packed_int3 position;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct Input {
  int3 position;
};

void tint_symbol_inner(uint3 id, const device Input_tint_packed_vec3* const tint_symbol_1) {
  int3 const pos = as_type<int3>((as_type<uint3>(int3((*(tint_symbol_1)).position)) - as_type<uint3>(int3(0))));
}

kernel void tint_symbol(const device Input_tint_packed_vec3* tint_symbol_2 [[buffer(0)]], uint3 id [[thread_position_in_grid]]) {
  tint_symbol_inner(id, tint_symbol_2);
  return;
}

