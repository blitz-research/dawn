#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct Results {
  /* 0x0000 */ tint_array<float, 4> colorSamples;
};

kernel void tint_symbol(device Results* tint_symbol_1 [[buffer(0)]], texture2d_ms<float, access::read> tint_symbol_2 [[texture(0)]]) {
  (*(tint_symbol_1)).colorSamples[0] = tint_symbol_2.read(uint2(int2(0)), 0)[0];
  return;
}

