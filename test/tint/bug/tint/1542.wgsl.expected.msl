#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct UniformBuffer_tint_packed_vec3 {
  /* 0x0000 */ packed_int3 d;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct UniformBuffer {
  int3 d;
};

kernel void tint_symbol(const constant UniformBuffer_tint_packed_vec3* tint_symbol_1 [[buffer(0)]]) {
  int3 const temp = as_type<int3>((as_type<uint3>(int3((*(tint_symbol_1)).d)) << uint3(0u)));
  return;
}

