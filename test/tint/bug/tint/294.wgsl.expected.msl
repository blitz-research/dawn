#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct Light_tint_packed_vec3 {
  packed_float3 position;
  packed_float3 colour;
};

struct Lights_tint_packed_vec3 {
  tint_array<Light_tint_packed_vec3, 1> light;
};

struct Light {
  float3 position;
  float3 colour;
};

struct Lights {
  tint_array<Light, 1> light;
};

