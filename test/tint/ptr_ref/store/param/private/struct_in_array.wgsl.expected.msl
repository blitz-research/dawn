#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct str {
  int i;
};

struct tint_private_vars_struct {
  tint_array<str, 4> P;
};

void func(thread str* const pointer) {
  str const tint_symbol_1 = str{};
  *(pointer) = tint_symbol_1;
}

kernel void tint_symbol() {
  thread tint_private_vars_struct tint_private_vars = {};
  func(&(tint_private_vars.P[2]));
  return;
}

